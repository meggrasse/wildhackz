[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Session = Package.session.Session;\nvar Mongo = Package.mongo.Mongo;\nvar EJSON = Package.ejson.EJSON;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar ObserveSequence = Package['observe-sequence'].ObserveSequence;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar MongoID = Package['mongo-id'].MongoID;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular-meteor-data/lib/diff-array.js                                                             //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\nvar module = angular.module('diffArray', ['getUpdates']);                                                     // 3\n                                                                                                              // 4\nmodule.factory('diffArray', ['getUpdates',                                                                    // 5\n  function(getUpdates) {                                                                                      // 6\n    var LocalCollection = Package['minimongo'].LocalCollection;                                               // 7\n    var idStringify = LocalCollection._idStringify || Package['mongo-id'].MongoID.idStringify;                // 8\n    var idParse = LocalCollection._idParse || Package['mongo-id'].MongoID.idParse;                            // 9\n                                                                                                              // 10\n    // Calculates the differences between `lastSeqArray` and                                                  // 11\n    // `seqArray` and calls appropriate functions from `callbacks`.                                           // 12\n    // Reuses Minimongo's diff algorithm implementation.                                                      // 13\n    // XXX Should be replaced with the original diffArray function here:                                      // 14\n    // https://github.com/meteor/meteor/blob/devel/packages/observe-sequence/observe_sequence.js#L152         // 15\n    // When it will become nested as well, tracking here: https://github.com/meteor/meteor/issues/3764        // 16\n    function diffArray(lastSeqArray, seqArray, callbacks, preventNestedDiff) {                                // 17\n      preventNestedDiff = !!preventNestedDiff;                                                                // 18\n                                                                                                              // 19\n      var diffFn = Package.minimongo.LocalCollection._diffQueryOrderedChanges ||                              // 20\n        Package['diff-sequence'].DiffSequence.diffQueryOrderedChanges;                                        // 21\n                                                                                                              // 22\n      var oldObjIds = [];                                                                                     // 23\n      var newObjIds = [];                                                                                     // 24\n      var posOld = {}; // maps from idStringify'd ids                                                         // 25\n      var posNew = {}; // ditto                                                                               // 26\n      var posCur = {};                                                                                        // 27\n      var lengthCur = lastSeqArray.length;                                                                    // 28\n                                                                                                              // 29\n      _.each(seqArray, function (doc, i) {                                                                    // 30\n        newObjIds.push({_id: doc._id});                                                                       // 31\n        posNew[idStringify(doc._id)] = i;                                                                     // 32\n      });                                                                                                     // 33\n                                                                                                              // 34\n      _.each(lastSeqArray, function (doc, i) {                                                                // 35\n        oldObjIds.push({_id: doc._id});                                                                       // 36\n        posOld[idStringify(doc._id)] = i;                                                                     // 37\n        posCur[idStringify(doc._id)] = i;                                                                     // 38\n      });                                                                                                     // 39\n                                                                                                              // 40\n      // Arrays can contain arbitrary objects. We don't diff the                                              // 41\n      // objects. Instead we always fire 'changedAt' callback on every                                        // 42\n      // object. The consumer of `observe-sequence` should deal with                                          // 43\n      // it appropriately.                                                                                    // 44\n      diffFn(oldObjIds, newObjIds, {                                                                          // 45\n        addedBefore: function (id, doc, before) {                                                             // 46\n          var position = before ? posCur[idStringify(before)] : lengthCur;                                    // 47\n                                                                                                              // 48\n          _.each(posCur, function (pos, id) {                                                                 // 49\n            if (pos >= position) posCur[id]++;                                                                // 50\n          });                                                                                                 // 51\n                                                                                                              // 52\n          lengthCur++;                                                                                        // 53\n          posCur[idStringify(id)] = position;                                                                 // 54\n                                                                                                              // 55\n          callbacks.addedAt(                                                                                  // 56\n            id,                                                                                               // 57\n            seqArray[posNew[idStringify(id)]],                                                                // 58\n            position,                                                                                         // 59\n            before                                                                                            // 60\n          );                                                                                                  // 61\n        },                                                                                                    // 62\n                                                                                                              // 63\n        movedBefore: function (id, before) {                                                                  // 64\n          var prevPosition = posCur[idStringify(id)];                                                         // 65\n          var position = before ? posCur[idStringify(before)] : lengthCur - 1;                                // 66\n                                                                                                              // 67\n          _.each(posCur, function (pos, id) {                                                                 // 68\n            if (pos >= prevPosition && pos <= position)                                                       // 69\n              posCur[id]--;                                                                                   // 70\n            else if (pos <= prevPosition && pos >= position)                                                  // 71\n              posCur[id]++;                                                                                   // 72\n          });                                                                                                 // 73\n                                                                                                              // 74\n          posCur[idStringify(id)] = position;                                                                 // 75\n                                                                                                              // 76\n          callbacks.movedTo(                                                                                  // 77\n            id,                                                                                               // 78\n            seqArray[posNew[idStringify(id)]],                                                                // 79\n            prevPosition,                                                                                     // 80\n            position,                                                                                         // 81\n            before                                                                                            // 82\n          );                                                                                                  // 83\n        },                                                                                                    // 84\n        removed: function (id) {                                                                              // 85\n          var prevPosition = posCur[idStringify(id)];                                                         // 86\n                                                                                                              // 87\n          _.each(posCur, function (pos, id) {                                                                 // 88\n            if (pos >= prevPosition) posCur[id]--;                                                            // 89\n          });                                                                                                 // 90\n                                                                                                              // 91\n          delete posCur[idStringify(id)];                                                                     // 92\n          lengthCur--;                                                                                        // 93\n                                                                                                              // 94\n          callbacks.removedAt(                                                                                // 95\n            id,                                                                                               // 96\n            lastSeqArray[posOld[idStringify(id)]],                                                            // 97\n            prevPosition                                                                                      // 98\n          );                                                                                                  // 99\n        }                                                                                                     // 100\n      });                                                                                                     // 101\n                                                                                                              // 102\n      _.each(posNew, function (pos, idString) {                                                               // 103\n        if (!_.has(posOld, idString)) return;                                                                 // 104\n                                                                                                              // 105\n        var id = idParse(idString);                                                                           // 106\n        var newItem = seqArray[pos] || {};                                                                    // 107\n        var oldItem = lastSeqArray[posOld[idString]];                                                         // 108\n        var updates = getUpdates(oldItem, newItem, preventNestedDiff);                                        // 109\n                                                                                                              // 110\n        if (!_.isEmpty(updates))                                                                              // 111\n          callbacks.changedAt(id, updates, pos, oldItem);                                                     // 112\n      });                                                                                                     // 113\n    }                                                                                                         // 114\n                                                                                                              // 115\n    diffArray.deepCopyChanges = function (oldItem, newItem) {                                                 // 116\n      var setDiff = getUpdates(oldItem, newItem).$set;                                                        // 117\n                                                                                                              // 118\n      _.each(setDiff, function(v, deepKey) {                                                                  // 119\n        setDeep(oldItem, deepKey, v);                                                                         // 120\n      });                                                                                                     // 121\n    };                                                                                                        // 122\n                                                                                                              // 123\n    diffArray.deepCopyRemovals = function (oldItem, newItem) {                                                // 124\n      var unsetDiff = getUpdates(oldItem, newItem).$unset;                                                    // 125\n                                                                                                              // 126\n      _.each(unsetDiff, function(v, deepKey) {                                                                // 127\n        unsetDeep(oldItem, deepKey);                                                                          // 128\n      });                                                                                                     // 129\n    };                                                                                                        // 130\n                                                                                                              // 131\n    var setDeep = function(obj, deepKey, v) {                                                                 // 132\n      var split = deepKey.split('.');                                                                         // 133\n      var initialKeys = _.initial(split);                                                                     // 134\n      var lastKey = _.last(split);                                                                            // 135\n                                                                                                              // 136\n      initialKeys.reduce(function(subObj, k, i) {                                                             // 137\n        var nextKey = split[i + 1];                                                                           // 138\n                                                                                                              // 139\n        if (isNumStr(nextKey)) {                                                                              // 140\n          if (subObj[k] == null) subObj[k] = [];                                                              // 141\n          if (subObj[k].length == parseInt(nextKey)) subObj[k].push(null);                                    // 142\n        }                                                                                                     // 143\n                                                                                                              // 144\n        else if (subObj[k] == null || !isHash(subObj[k])) {                                                   // 145\n          subObj[k] = {};                                                                                     // 146\n        }                                                                                                     // 147\n                                                                                                              // 148\n        return subObj[k];                                                                                     // 149\n      }, obj);                                                                                                // 150\n                                                                                                              // 151\n      var deepObj = getDeep(obj, initialKeys);                                                                // 152\n      deepObj[lastKey] = v;                                                                                   // 153\n      return v;                                                                                               // 154\n    };                                                                                                        // 155\n                                                                                                              // 156\n    var unsetDeep = function(obj, deepKey) {                                                                  // 157\n      var split = deepKey.split('.');                                                                         // 158\n      var initialKeys = _.initial(split);                                                                     // 159\n      var lastKey = _.last(split);                                                                            // 160\n      var deepObj = getDeep(obj, initialKeys);                                                                // 161\n                                                                                                              // 162\n      if (_.isArray(deepObj) && isNumStr(lastKey))                                                            // 163\n        return !!deepObj.splice(lastKey, 1);                                                                  // 164\n      else                                                                                                    // 165\n        return delete deepObj[lastKey];                                                                       // 166\n    };                                                                                                        // 167\n                                                                                                              // 168\n    var getDeep = function(obj, keys) {                                                                       // 169\n      return keys.reduce(function(subObj, k) {                                                                // 170\n        return subObj[k];                                                                                     // 171\n      }, obj);                                                                                                // 172\n    };                                                                                                        // 173\n                                                                                                              // 174\n    var isHash = function(obj) {                                                                              // 175\n      return _.isObject(obj) &&                                                                               // 176\n             Object.getPrototypeOf(obj) === Object.prototype;                                                 // 177\n    };                                                                                                        // 178\n                                                                                                              // 179\n    var isNumStr = function(str) {                                                                            // 180\n      return str.match(/^\\d+$/);                                                                              // 181\n    };                                                                                                        // 182\n                                                                                                              // 183\n    return diffArray;                                                                                         // 184\n}]);                                                                                                          // 185\n                                                                                                              // 186\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular-meteor-data/lib/get-updates.js                                                            //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\n// https://github.com/DAB0mB/get-updates                                                                      // 3\n(function() {                                                                                                 // 4\n  var module = angular.module('getUpdates', []);                                                              // 5\n                                                                                                              // 6\n  var utils = (function() {                                                                                   // 7\n    var rip = function(obj, level) {                                                                          // 8\n      if (level < 1) return {};                                                                               // 9\n                                                                                                              // 10\n      return _.reduce(obj, function(clone, v, k) {                                                            // 11\n        v = _.isObject(v) ? rip(v, --level) : v;                                                              // 12\n        clone[k] = v;                                                                                         // 13\n        return clone;                                                                                         // 14\n      }, {});                                                                                                 // 15\n    };                                                                                                        // 16\n                                                                                                              // 17\n    var toPaths = function(obj) {                                                                             // 18\n      var keys = getKeyPaths(obj);                                                                            // 19\n      var values = getDeepValues(obj);                                                                        // 20\n      return _.object(keys, values);                                                                          // 21\n    };                                                                                                        // 22\n                                                                                                              // 23\n    var getKeyPaths = function(obj) {                                                                         // 24\n      var keys = _.keys(obj).map(function(k) {                                                                // 25\n        var v = obj[k];                                                                                       // 26\n        if (!_.isObject(v) || _.isEmpty(v) || _.isArray(v)) return k;                                         // 27\n                                                                                                              // 28\n        return getKeyPaths(v).map(function(subKey) {                                                          // 29\n          return k + '.' + subKey;                                                                            // 30\n        });                                                                                                   // 31\n      });                                                                                                     // 32\n                                                                                                              // 33\n      return _.flatten(keys);                                                                                 // 34\n    };                                                                                                        // 35\n                                                                                                              // 36\n    var getDeepValues = function(obj,arr) {                                                                   // 37\n      arr = arr || [];                                                                                        // 38\n                                                                                                              // 39\n      _.values(obj).forEach(function(v) {                                                                     // 40\n        if (!_.isObject(v) || _.isEmpty(v) || _.isArray(v))                                                   // 41\n          arr.push(v);                                                                                        // 42\n        else                                                                                                  // 43\n          getDeepValues(v, arr);                                                                              // 44\n      });                                                                                                     // 45\n                                                                                                              // 46\n      return arr;                                                                                             // 47\n    };                                                                                                        // 48\n                                                                                                              // 49\n    var flatten = function(arr) {                                                                             // 50\n      return arr.reduce(function(flattened, v, i) {                                                           // 51\n        if (_.isArray(v) && !_.isEmpty(v))                                                                    // 52\n          flattened.push.apply(flattened, flatten(v));                                                        // 53\n        else                                                                                                  // 54\n          flattened.push(v);                                                                                  // 55\n                                                                                                              // 56\n        return flattened;                                                                                     // 57\n      }, []);                                                                                                 // 58\n    };                                                                                                        // 59\n                                                                                                              // 60\n    var setFilled = function(obj, k, v) {                                                                     // 61\n      if (!_.isEmpty(v)) obj[k] = v;                                                                          // 62\n    };                                                                                                        // 63\n                                                                                                              // 64\n    var assert = function(result, msg) {                                                                      // 65\n      if (!result) throwErr(msg);                                                                             // 66\n    };                                                                                                        // 67\n                                                                                                              // 68\n    var throwErr = function(msg) {                                                                            // 69\n      throw Error('get-updates error - ' + msg);                                                              // 70\n    };                                                                                                        // 71\n                                                                                                              // 72\n    return {                                                                                                  // 73\n      rip: rip,                                                                                               // 74\n      toPaths: toPaths,                                                                                       // 75\n      getKeyPaths: getKeyPaths,                                                                               // 76\n      getDeepValues: getDeepValues,                                                                           // 77\n      setFilled: setFilled,                                                                                   // 78\n      assert: assert,                                                                                         // 79\n      throwErr: throwErr                                                                                      // 80\n    };                                                                                                        // 81\n  })();                                                                                                       // 82\n                                                                                                              // 83\n  var getDifference = (function() {                                                                           // 84\n    var getDifference = function(src, dst, isShallow) {                                                       // 85\n      var level;                                                                                              // 86\n                                                                                                              // 87\n      if (isShallow > 1)                                                                                      // 88\n        level = isShallow;                                                                                    // 89\n      else if (isShallow)                                                                                     // 90\n        level = 1;                                                                                            // 91\n                                                                                                              // 92\n      if (level) {                                                                                            // 93\n        src = utils.rip(src, level);                                                                          // 94\n        dst = utils.rip(dst, level);                                                                          // 95\n      }                                                                                                       // 96\n                                                                                                              // 97\n      return compare(src, dst);                                                                               // 98\n    };                                                                                                        // 99\n                                                                                                              // 100\n    var compare = function(src, dst) {                                                                        // 101\n      var srcKeys = _.keys(src);                                                                              // 102\n      var dstKeys = _.keys(dst);                                                                              // 103\n                                                                                                              // 104\n      var keys = _.chain([])                                                                                  // 105\n        .concat(srcKeys)                                                                                      // 106\n        .concat(dstKeys)                                                                                      // 107\n        .uniq()                                                                                               // 108\n        .without('$$hashKey')                                                                                 // 109\n        .value();                                                                                             // 110\n                                                                                                              // 111\n      return keys.reduce(function(diff, k) {                                                                  // 112\n        var srcValue = src[k];                                                                                // 113\n        var dstValue = dst[k];                                                                                // 114\n                                                                                                              // 115\n        if (_.isDate(srcValue) && _.isDate(dstValue)) {                                                       // 116\n          if (srcValue.getTime() != dstValue.getTime()) diff[k] = dstValue;                                   // 117\n        }                                                                                                     // 118\n                                                                                                              // 119\n        if (_.isObject(srcValue) && _.isObject(dstValue)) {                                                   // 120\n          var valueDiff = getDifference(srcValue, dstValue);                                                  // 121\n          utils.setFilled(diff, k, valueDiff);                                                                // 122\n        }                                                                                                     // 123\n                                                                                                              // 124\n        else if (srcValue !== dstValue) {                                                                     // 125\n          diff[k] = dstValue;                                                                                 // 126\n        }                                                                                                     // 127\n                                                                                                              // 128\n        return diff;                                                                                          // 129\n      }, {});                                                                                                 // 130\n    };                                                                                                        // 131\n                                                                                                              // 132\n    return getDifference;                                                                                     // 133\n  })();                                                                                                       // 134\n                                                                                                              // 135\n  var getUpdates = (function() {                                                                              // 136\n    var getUpdates = function(src, dst, isShallow) {                                                          // 137\n      utils.assert(_.isObject(src), 'first argument must be an object');                                      // 138\n      utils.assert(_.isObject(dst), 'second argument must be an object');                                     // 139\n                                                                                                              // 140\n      var diff = getDifference(src, dst, isShallow);                                                          // 141\n      var paths = utils.toPaths(diff);                                                                        // 142\n                                                                                                              // 143\n      var set = createSet(paths);                                                                             // 144\n      var unset = createUnset(paths);                                                                         // 145\n      var pull = createPull(unset);                                                                           // 146\n                                                                                                              // 147\n      var updates = {};                                                                                       // 148\n      utils.setFilled(updates, '$set', set);                                                                  // 149\n      utils.setFilled(updates, '$unset', unset);                                                              // 150\n      utils.setFilled(updates, '$pull', pull);                                                                // 151\n                                                                                                              // 152\n      return updates;                                                                                         // 153\n    };                                                                                                        // 154\n                                                                                                              // 155\n    var createSet = function(paths) {                                                                         // 156\n      var undefinedKeys = getUndefinedKeys(paths);                                                            // 157\n      return _.omit(paths, undefinedKeys);                                                                    // 158\n    };                                                                                                        // 159\n                                                                                                              // 160\n    var createUnset = function(paths) {                                                                       // 161\n      var undefinedKeys = getUndefinedKeys(paths);                                                            // 162\n      var unset = _.pick(paths, undefinedKeys);                                                               // 163\n                                                                                                              // 164\n      return _.reduce(unset, function(result, v, k) {                                                         // 165\n        result[k] = true;                                                                                     // 166\n        return result;                                                                                        // 167\n      }, {});                                                                                                 // 168\n    };                                                                                                        // 169\n                                                                                                              // 170\n    var createPull = function(unset) {                                                                        // 171\n      var arrKeyPaths = _.keys(unset).map(function(k) {                                                       // 172\n        var split = k.match(/(.*)\\.\\d+$/);                                                                    // 173\n        return split && split[1];                                                                             // 174\n      });                                                                                                     // 175\n                                                                                                              // 176\n      return _.compact(arrKeyPaths).reduce(function(pull, k) {                                                // 177\n        pull[k] = null;                                                                                       // 178\n        return pull;                                                                                          // 179\n      }, {});                                                                                                 // 180\n    };                                                                                                        // 181\n                                                                                                              // 182\n    var getUndefinedKeys = function(obj) {                                                                    // 183\n      return _.keys(obj).filter(function (k) {                                                                // 184\n        var v = obj[k];                                                                                       // 185\n        return _.isUndefined(v);                                                                              // 186\n      });                                                                                                     // 187\n    };                                                                                                        // 188\n                                                                                                              // 189\n    return getUpdates;                                                                                        // 190\n  })();                                                                                                       // 191\n                                                                                                              // 192\n  module.value('getUpdates', getUpdates);                                                                     // 193\n})();                                                                                                         // 194\n                                                                                                              // 195\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular-meteor-data/modules/angular-meteor-subscribe.js                                           //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\nvar angularMeteorSubscribe = angular.module('angular-meteor.subscribe', []);                                  // 2\n                                                                                                              // 3\nangularMeteorSubscribe.service('$meteorSubscribe', ['$q',                                                     // 4\n  function ($q) {                                                                                             // 5\n    var self = this;                                                                                          // 6\n                                                                                                              // 7\n    this._subscribe = function(scope, deferred, args) {                                                       // 8\n      var subscription = null;                                                                                // 9\n      var lastArg = args[args.length - 1];                                                                    // 10\n                                                                                                              // 11\n      // User supplied onStop callback                                                                        // 12\n      // save it for later use and remove                                                                     // 13\n      // from subscription arguments                                                                          // 14\n      if (angular.isObject(lastArg) &&                                                                        // 15\n          angular.isFunction(lastArg.onStop)) {                                                               // 16\n        var onStop = lastArg.onStop;                                                                          // 17\n                                                                                                              // 18\n        args.pop();                                                                                           // 19\n      }                                                                                                       // 20\n                                                                                                              // 21\n      args.push({                                                                                             // 22\n        onReady: function() {                                                                                 // 23\n          deferred.resolve(subscription);                                                                     // 24\n        },                                                                                                    // 25\n        onStop: function(err) {                                                                               // 26\n          if (!deferred.promise.$$state.status) {                                                             // 27\n            if (err)                                                                                          // 28\n              deferred.reject(err);                                                                           // 29\n            else                                                                                              // 30\n              deferred.reject(new Meteor.Error(\"Subscription Stopped\",                                        // 31\n                \"Subscription stopped by a call to stop method. Either by the client or by the server.\"));    // 32\n          } else if (onStop)                                                                                  // 33\n            // After promise was resolved or rejected                                                         // 34\n            // call user supplied onStop callback.                                                            // 35\n            onStop.apply(this, Array.prototype.slice.call(arguments));                                        // 36\n                                                                                                              // 37\n        }                                                                                                     // 38\n      });                                                                                                     // 39\n                                                                                                              // 40\n      subscription =  Meteor.subscribe.apply(scope, args);                                                    // 41\n                                                                                                              // 42\n      return subscription;                                                                                    // 43\n    };                                                                                                        // 44\n                                                                                                              // 45\n    this.subscribe = function(){                                                                              // 46\n      var deferred = $q.defer();                                                                              // 47\n      var args = Array.prototype.slice.call(arguments);                                                       // 48\n      var subscription = null;                                                                                // 49\n                                                                                                              // 50\n      self._subscribe(this, deferred, args);                                                                  // 51\n                                                                                                              // 52\n      return deferred.promise;                                                                                // 53\n    };                                                                                                        // 54\n  }]);                                                                                                        // 55\n                                                                                                              // 56\nangularMeteorSubscribe.run(['$rootScope', '$q', '$meteorSubscribe',                                           // 57\n  function($rootScope, $q, $meteorSubscribe) {                                                                // 58\n    Object.getPrototypeOf($rootScope).$meteorSubscribe = function() {                                         // 59\n      var deferred = $q.defer();                                                                              // 60\n      var args = Array.prototype.slice.call(arguments);                                                       // 61\n                                                                                                              // 62\n      var subscription = $meteorSubscribe._subscribe(this, deferred, args);                                   // 63\n                                                                                                              // 64\n      this.$on('$destroy', function() {                                                                       // 65\n        subscription.stop();                                                                                  // 66\n      });                                                                                                     // 67\n                                                                                                              // 68\n      return deferred.promise;                                                                                // 69\n    };                                                                                                        // 70\n}]);                                                                                                          // 71\n                                                                                                              // 72\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular-meteor-data/modules/angular-meteor-stopper.js                                             //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\nvar angularMeteorStopper = angular.module('angular-meteor.stopper',                                           // 3\n  ['angular-meteor.subscribe']);                                                                              // 4\n                                                                                                              // 5\nangularMeteorStopper.factory('$meteorStopper', ['$q', '$meteorSubscribe',                                     // 6\n  function($q, $meteorSubscribe) {                                                                            // 7\n    function $meteorStopper($meteorEntity) {                                                                  // 8\n      return function() {                                                                                     // 9\n        var args = Array.prototype.slice.call(arguments);                                                     // 10\n        var meteorEntity = $meteorEntity.apply(this, args);                                                   // 11\n                                                                                                              // 12\n        angular.extend(meteorEntity, $meteorStopper);                                                         // 13\n        meteorEntity.$$scope = this;                                                                          // 14\n                                                                                                              // 15\n        this.$on('$destroy', function () {                                                                    // 16\n          meteorEntity.stop();                                                                                // 17\n          if (meteorEntity.subscription) meteorEntity.subscription.stop();                                    // 18\n        });                                                                                                   // 19\n                                                                                                              // 20\n        return meteorEntity;                                                                                  // 21\n      };                                                                                                      // 22\n    }                                                                                                         // 23\n                                                                                                              // 24\n    $meteorStopper.subscribe = function() {                                                                   // 25\n      var args = Array.prototype.slice.call(arguments);                                                       // 26\n      this.subscription = $meteorSubscribe._subscribe(this.$$scope, $q.defer(), args);                        // 27\n      return this;                                                                                            // 28\n    };                                                                                                        // 29\n                                                                                                              // 30\n    return $meteorStopper;                                                                                    // 31\n}]);                                                                                                          // 32\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular-meteor-data/modules/angular-meteor-collection.js                                          //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\nvar angularMeteorCollection = angular.module('angular-meteor.collection',                                     // 3\n  ['angular-meteor.stopper', 'angular-meteor.subscribe', 'angular-meteor.utils', 'diffArray']);               // 4\n                                                                                                              // 5\n// The reason angular meteor collection is a factory function and not something                               // 6\n// that inherit from array comes from here:                                                                   // 7\n// http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/                     // 8\n// We went with the direct extensions approach.                                                               // 9\nangularMeteorCollection.factory('AngularMeteorCollection', [                                                  // 10\n  '$q', '$meteorSubscribe', '$meteorUtils', '$rootScope', '$timeout', 'diffArray',                            // 11\n  function($q, $meteorSubscribe, $meteorUtils, $rootScope, $timeout, diffArray) {                             // 12\n    function AngularMeteorCollection(curDefFunc, collection, diffArrayFunc, autoClientSave) {                 // 13\n      var data = [];                                                                                          // 14\n      // Server backup data to evaluate what changes come from client                                         // 15\n      // after each server update.                                                                            // 16\n      data._serverBackup = [];                                                                                // 17\n      // Array differ function.                                                                               // 18\n      data._diffArrayFunc = diffArrayFunc;                                                                    // 19\n      // Handler of the cursor observer.                                                                      // 20\n      data._hObserve = null;                                                                                  // 21\n      // On new cursor autorun handler                                                                        // 22\n      // (autorun for reactive variables).                                                                    // 23\n      data._hNewCurAutorun = null;                                                                            // 24\n      // On new data autorun handler                                                                          // 25\n      // (autorun for cursor.fetch).                                                                          // 26\n      data._hDataAutorun = null;                                                                              // 27\n                                                                                                              // 28\n      if (angular.isDefined(collection)) {                                                                    // 29\n        data.$$collection = collection;                                                                       // 30\n      } else {                                                                                                // 31\n        var cursor = curDefFunc();                                                                            // 32\n        data.$$collection = $meteorUtils.getCollectionByName(cursor.collection.name);                         // 33\n      }                                                                                                       // 34\n                                                                                                              // 35\n      angular.extend(data, AngularMeteorCollection);                                                          // 36\n      data._startCurAutorun(curDefFunc, autoClientSave);                                                      // 37\n                                                                                                              // 38\n      return data;                                                                                            // 39\n    }                                                                                                         // 40\n                                                                                                              // 41\n    AngularMeteorCollection._startCurAutorun = function(curDefFunc, autoClientSave) {                         // 42\n      var self = this;                                                                                        // 43\n      self._hNewCurAutorun = Tracker.autorun(function() {                                                     // 44\n        // When the reactive func gets recomputated we need to stop any previous                              // 45\n        // observeChanges.                                                                                    // 46\n        Tracker.onInvalidate(function() {                                                                     // 47\n          self._stopCursor();                                                                                 // 48\n        });                                                                                                   // 49\n        if (autoClientSave) {                                                                                 // 50\n          self._setAutoClientSave();                                                                          // 51\n        }                                                                                                     // 52\n        self._updateCursor(curDefFunc(), autoClientSave);                                                     // 53\n      });                                                                                                     // 54\n    };                                                                                                        // 55\n                                                                                                              // 56\n    AngularMeteorCollection.subscribe = function() {                                                          // 57\n      $meteorSubscribe.subscribe.apply(this, arguments);                                                      // 58\n      return this;                                                                                            // 59\n    };                                                                                                        // 60\n                                                                                                              // 61\n    AngularMeteorCollection.save = function(docs, useUnsetModifier) {                                         // 62\n      // save whole collection                                                                                // 63\n      if (!docs) docs = this;                                                                                 // 64\n      // save single doc                                                                                      // 65\n      docs = [].concat(docs);                                                                                 // 66\n                                                                                                              // 67\n      var promises = docs.map(function(doc) {                                                                 // 68\n        return this._upsertDoc(doc, useUnsetModifier);                                                        // 69\n      }, this);                                                                                               // 70\n                                                                                                              // 71\n      var allPromise = $q.all(promises);                                                                      // 72\n                                                                                                              // 73\n      allPromise.finally(function() {                                                                         // 74\n        // calls digestion loop with no conflicts                                                             // 75\n        $timeout(angular.noop);                                                                               // 76\n      });                                                                                                     // 77\n                                                                                                              // 78\n      return allPromise;                                                                                      // 79\n    };                                                                                                        // 80\n                                                                                                              // 81\n    AngularMeteorCollection._upsertDoc = function(doc, useUnsetModifier) {                                    // 82\n      var deferred = $q.defer();                                                                              // 83\n      var collection = this.$$collection;                                                                     // 84\n      var createFulfill = _.partial($meteorUtils.fulfill, deferred, null);                                    // 85\n                                                                                                              // 86\n      // delete $$hashkey                                                                                     // 87\n      doc = $meteorUtils.stripDollarPrefixedKeys(doc);                                                        // 88\n      var docId = doc._id;                                                                                    // 89\n      var isExist = collection.findOne(docId);                                                                // 90\n                                                                                                              // 91\n      // update                                                                                               // 92\n      if (isExist) {                                                                                          // 93\n        // Deletes _id property (from the copy) so that                                                       // 94\n        // it can be $set using update.                                                                       // 95\n        delete doc._id;                                                                                       // 96\n        var modifier = useUnsetModifier ? {$unset: doc} : {$set: doc};                                        // 97\n        // NOTE: do not use #upsert() method, since it does not exist in some collections                     // 98\n        collection.update(docId, modifier, createFulfill(function() {                                         // 99\n          return {_id: docId, action: 'updated'};                                                             // 100\n        }));                                                                                                  // 101\n      }                                                                                                       // 102\n      // insert                                                                                               // 103\n      else {                                                                                                  // 104\n        collection.insert(doc, createFulfill(function(id) {                                                   // 105\n          return {_id: id, action: 'inserted'};                                                               // 106\n        }));                                                                                                  // 107\n      }                                                                                                       // 108\n                                                                                                              // 109\n      return deferred.promise;                                                                                // 110\n    };                                                                                                        // 111\n                                                                                                              // 112\n    // performs $pull operations parallely.                                                                   // 113\n    // used for handling splice operations returned from getUpdates() to prevent conflicts.                   // 114\n    // see issue: https://github.com/Urigo/angular-meteor/issues/793                                          // 115\n    AngularMeteorCollection._updateDiff = function(selector, update, callback) {                              // 116\n      callback = callback || angular.noop;                                                                    // 117\n      var setters = _.omit(update, '$pull');                                                                  // 118\n      var updates = [setters];                                                                                // 119\n                                                                                                              // 120\n      _.each(update.$pull, function(pull, prop) {                                                             // 121\n        var puller = {};                                                                                      // 122\n        puller[prop] = pull;                                                                                  // 123\n        updates.push({ $pull: puller });                                                                      // 124\n      });                                                                                                     // 125\n                                                                                                              // 126\n      this._updateParallel(selector, updates, callback);                                                      // 127\n    };                                                                                                        // 128\n                                                                                                              // 129\n    // performs each update operation parallely                                                               // 130\n    AngularMeteorCollection._updateParallel = function(selector, updates, callback) {                         // 131\n      var self = this;                                                                                        // 132\n      var done = _.after(updates.length, callback);                                                           // 133\n                                                                                                              // 134\n      var next = function(err, affectedDocsNum) {                                                             // 135\n        if (err) return callback(err);                                                                        // 136\n        done(null, affectedDocsNum);                                                                          // 137\n      };                                                                                                      // 138\n                                                                                                              // 139\n      _.each(updates, function(update) {                                                                      // 140\n        self.$$collection.update(selector, update, next);                                                     // 141\n      });                                                                                                     // 142\n    };                                                                                                        // 143\n                                                                                                              // 144\n    AngularMeteorCollection.remove = function(keyOrDocs) {                                                    // 145\n      var keys;                                                                                               // 146\n      // remove whole collection                                                                              // 147\n      if (!keyOrDocs) {                                                                                       // 148\n        keys = _.pluck(this, '_id');                                                                          // 149\n      } else {                                                                                                // 150\n        // remove docs                                                                                        // 151\n        keys = _.map([].concat(keyOrDocs), function(keyOrDoc) {                                               // 152\n          return keyOrDoc._id || keyOrDoc;                                                                    // 153\n        });                                                                                                   // 154\n      }                                                                                                       // 155\n      // Checks if all keys are correct.                                                                      // 156\n      check(keys, [Match.OneOf(String, Mongo.ObjectID)]);                                                     // 157\n                                                                                                              // 158\n      var promises = keys.map(function(key) {                                                                 // 159\n        return this._removeDoc(key);                                                                          // 160\n      }, this);                                                                                               // 161\n                                                                                                              // 162\n      var allPromise = $q.all(promises);                                                                      // 163\n                                                                                                              // 164\n      allPromise.finally(function() {                                                                         // 165\n        $timeout(angular.noop);                                                                               // 166\n      });                                                                                                     // 167\n                                                                                                              // 168\n      return allPromise;                                                                                      // 169\n    };                                                                                                        // 170\n                                                                                                              // 171\n    AngularMeteorCollection._removeDoc = function(id) {                                                       // 172\n      var deferred = $q.defer();                                                                              // 173\n      var collection = this.$$collection;                                                                     // 174\n      var fulfill = $meteorUtils.fulfill(deferred, null, { _id: id, action: 'removed' });                     // 175\n      collection.remove(id, fulfill);                                                                         // 176\n      return deferred.promise;                                                                                // 177\n    };                                                                                                        // 178\n                                                                                                              // 179\n    AngularMeteorCollection._updateCursor = function(cursor, autoClientSave) {                                // 180\n      var self = this;                                                                                        // 181\n                                                                                                              // 182\n      // XXX - consider adding an option for a non-orderd result                                              // 183\n      // for faster performance.                                                                              // 184\n      if (self._hObserve) {                                                                                   // 185\n        self._hObserve.stop();                                                                                // 186\n        self._hDataAutorun.stop();                                                                            // 187\n      }                                                                                                       // 188\n                                                                                                              // 189\n      var serverMode = false;                                                                                 // 190\n      function setServerUpdateMode(name) {                                                                    // 191\n        serverMode = true;                                                                                    // 192\n        // To simplify server update logic, we don't follow                                                   // 193\n        // updates from the client at the same time.                                                          // 194\n        self._unsetAutoClientSave();                                                                          // 195\n      }                                                                                                       // 196\n                                                                                                              // 197\n      var hUnsetTimeout = null;                                                                               // 198\n      // Here we use $timeout to combine multiple updates that go                                             // 199\n      // each one after another.                                                                              // 200\n      function unsetServerUpdateMode() {                                                                      // 201\n        if (hUnsetTimeout) {                                                                                  // 202\n          $timeout.cancel(hUnsetTimeout);                                                                     // 203\n          hUnsetTimeout = null;                                                                               // 204\n        }                                                                                                     // 205\n        hUnsetTimeout = $timeout(function() {                                                                 // 206\n          serverMode = false;                                                                                 // 207\n          // Finds updates that was potentially done from the client side                                     // 208\n          // and saves them.                                                                                  // 209\n          var changes = collectionUtils.diff(self, self._serverBackup,                                        // 210\n            self._diffArrayFunc);                                                                             // 211\n          self._saveChanges(changes);                                                                         // 212\n          // After, continues following client updates.                                                       // 213\n          if (autoClientSave) {                                                                               // 214\n            self._setAutoClientSave();                                                                        // 215\n          }                                                                                                   // 216\n        }, 0);                                                                                                // 217\n      }                                                                                                       // 218\n                                                                                                              // 219\n      this._hObserve = cursor.observe({                                                                       // 220\n        addedAt: function(doc, atIndex) {                                                                     // 221\n          self.splice(atIndex, 0, doc);                                                                       // 222\n          self._serverBackup.splice(atIndex, 0, doc);                                                         // 223\n          setServerUpdateMode();                                                                              // 224\n        },                                                                                                    // 225\n                                                                                                              // 226\n        changedAt: function(doc, oldDoc, atIndex) {                                                           // 227\n          diffArray.deepCopyChanges(self[atIndex], doc);                                                      // 228\n          diffArray.deepCopyRemovals(self[atIndex], doc);                                                     // 229\n          self._serverBackup[atIndex] = self[atIndex];                                                        // 230\n          setServerUpdateMode();                                                                              // 231\n        },                                                                                                    // 232\n                                                                                                              // 233\n        movedTo: function(doc, fromIndex, toIndex) {                                                          // 234\n          self.splice(fromIndex, 1);                                                                          // 235\n          self.splice(toIndex, 0, doc);                                                                       // 236\n          self._serverBackup.splice(fromIndex, 1);                                                            // 237\n          self._serverBackup.splice(toIndex, 0, doc);                                                         // 238\n          setServerUpdateMode();                                                                              // 239\n        },                                                                                                    // 240\n                                                                                                              // 241\n        removedAt: function(oldDoc) {                                                                         // 242\n          var removedIndex = collectionUtils.findIndexById(self, oldDoc);                                     // 243\n                                                                                                              // 244\n          if (removedIndex != -1) {                                                                           // 245\n            self.splice(removedIndex, 1);                                                                     // 246\n            self._serverBackup.splice(removedIndex, 1);                                                       // 247\n            setServerUpdateMode();                                                                            // 248\n          } else {                                                                                            // 249\n            // If it's been removed on client then it's already not in collection                             // 250\n            // itself but still is in the _serverBackup.                                                      // 251\n            removedIndex = collectionUtils.findIndexById(self._serverBackup, oldDoc);                         // 252\n                                                                                                              // 253\n            if (removedIndex != -1) {                                                                         // 254\n              self._serverBackup.splice(removedIndex, 1);                                                     // 255\n            }                                                                                                 // 256\n          }                                                                                                   // 257\n        }                                                                                                     // 258\n      });                                                                                                     // 259\n                                                                                                              // 260\n      this._hDataAutorun = Tracker.autorun(function() {                                                       // 261\n        cursor.fetch();                                                                                       // 262\n        if (serverMode) {                                                                                     // 263\n          unsetServerUpdateMode();                                                                            // 264\n        }                                                                                                     // 265\n      });                                                                                                     // 266\n    };                                                                                                        // 267\n                                                                                                              // 268\n    AngularMeteorCollection.stop = function() {                                                               // 269\n      this._stopCursor();                                                                                     // 270\n      this._hNewCurAutorun.stop();                                                                            // 271\n    };                                                                                                        // 272\n                                                                                                              // 273\n    AngularMeteorCollection._stopCursor = function() {                                                        // 274\n      this._unsetAutoClientSave();                                                                            // 275\n                                                                                                              // 276\n      if (this._hObserve) {                                                                                   // 277\n        this._hObserve.stop();                                                                                // 278\n        this._hDataAutorun.stop();                                                                            // 279\n      }                                                                                                       // 280\n                                                                                                              // 281\n      this.splice(0);                                                                                         // 282\n      this._serverBackup.splice(0);                                                                           // 283\n    };                                                                                                        // 284\n                                                                                                              // 285\n    AngularMeteorCollection._unsetAutoClientSave = function(name) {                                           // 286\n      if (this._hRegAutoBind) {                                                                               // 287\n        this._hRegAutoBind();                                                                                 // 288\n        this._hRegAutoBind = null;                                                                            // 289\n      }                                                                                                       // 290\n    };                                                                                                        // 291\n                                                                                                              // 292\n    AngularMeteorCollection._setAutoClientSave = function() {                                                 // 293\n      var self = this;                                                                                        // 294\n                                                                                                              // 295\n      // Always unsets auto save to keep only one $watch handler.                                             // 296\n      self._unsetAutoClientSave();                                                                            // 297\n                                                                                                              // 298\n      self._hRegAutoBind = $rootScope.$watch(function() {                                                     // 299\n        return self;                                                                                          // 300\n      }, function(nItems, oItems) {                                                                           // 301\n        if (nItems === oItems) return;                                                                        // 302\n                                                                                                              // 303\n        self._unsetAutoClientSave();                                                                          // 304\n        var changes = collectionUtils.diff(self, oItems,                                                      // 305\n          self._diffArrayFunc);                                                                               // 306\n        self._saveChanges(changes);                                                                           // 307\n        self._setAutoClientSave();                                                                            // 308\n      }, true);                                                                                               // 309\n    };                                                                                                        // 310\n                                                                                                              // 311\n    AngularMeteorCollection._saveChanges = function(changes) {                                                // 312\n      var self = this;                                                                                        // 313\n                                                                                                              // 314\n      // Saves added documents                                                                                // 315\n      // Using reversed iteration to prevent indexes from changing during splice                              // 316\n      var addedDocs = changes.added.reverse().map(function(descriptor) {                                      // 317\n        self.splice(descriptor.index, 1);                                                                     // 318\n        return descriptor.item;                                                                               // 319\n      });                                                                                                     // 320\n      if (addedDocs.length) self.save(addedDocs);                                                             // 321\n                                                                                                              // 322\n      // Removes deleted documents                                                                            // 323\n      var removedDocs = changes.removed.map(function(descriptor) {                                            // 324\n        return descriptor.item;                                                                               // 325\n      });                                                                                                     // 326\n      if (removedDocs.length) self.remove(removedDocs);                                                       // 327\n                                                                                                              // 328\n      // Updates changed documents                                                                            // 329\n      changes.changed.forEach(function(descriptor) {                                                          // 330\n        self._updateDiff(descriptor.selector, descriptor.modifier);                                           // 331\n      });                                                                                                     // 332\n    };                                                                                                        // 333\n                                                                                                              // 334\n    return AngularMeteorCollection;                                                                           // 335\n}]);                                                                                                          // 336\n                                                                                                              // 337\nangularMeteorCollection.factory('$meteorCollectionFS', ['$meteorCollection', 'diffArray',                     // 338\n  function($meteorCollection, diffArray) {                                                                    // 339\n    function $meteorCollectionFS(reactiveFunc, autoClientSave, collection) {                                  // 340\n      return new $meteorCollection(reactiveFunc, autoClientSave, collection, noNestedDiffArray);              // 341\n    }                                                                                                         // 342\n                                                                                                              // 343\n    var noNestedDiffArray = function(lastSeqArray, seqArray, callbacks) {                                     // 344\n      return diffArray(lastSeqArray, seqArray, callbacks, true);                                              // 345\n    };                                                                                                        // 346\n                                                                                                              // 347\n    return $meteorCollectionFS;                                                                               // 348\n}]);                                                                                                          // 349\n                                                                                                              // 350\nangularMeteorCollection.factory('$meteorCollection', [                                                        // 351\n  'AngularMeteorCollection', '$rootScope', 'diffArray',                                                       // 352\n  function(AngularMeteorCollection, $rootScope, diffArray) {                                                  // 353\n    function $meteorCollection(reactiveFunc, autoClientSave, collection, diffArrayFunc) {                     // 354\n      // Validate parameters                                                                                  // 355\n      if (!reactiveFunc) {                                                                                    // 356\n        throw new TypeError('The first argument of $meteorCollection is undefined.');                         // 357\n      }                                                                                                       // 358\n                                                                                                              // 359\n      if (!(angular.isFunction(reactiveFunc) || angular.isFunction(reactiveFunc.find))) {                     // 360\n        throw new TypeError(                                                                                  // 361\n          'The first argument of $meteorCollection must be a function or\\\n            a have a find function property.');                                                               // 363\n      }                                                                                                       // 364\n                                                                                                              // 365\n      if (!angular.isFunction(reactiveFunc)) {                                                                // 366\n        collection = angular.isDefined(collection) ? collection : reactiveFunc;                               // 367\n        reactiveFunc = _.bind(reactiveFunc.find, reactiveFunc);                                               // 368\n      }                                                                                                       // 369\n                                                                                                              // 370\n      // By default auto save - true.                                                                         // 371\n      autoClientSave = angular.isDefined(autoClientSave) ? autoClientSave : true;                             // 372\n      var ngCollection = new AngularMeteorCollection(reactiveFunc, collection,                                // 373\n        diffArrayFunc || diffArray, autoClientSave);                                                          // 374\n                                                                                                              // 375\n      return ngCollection;                                                                                    // 376\n    }                                                                                                         // 377\n                                                                                                              // 378\n    return $meteorCollection;                                                                                 // 379\n }]);                                                                                                         // 380\n                                                                                                              // 381\nangularMeteorCollection.run([                                                                                 // 382\n  '$rootScope', '$meteorCollection', '$meteorCollectionFS', '$meteorStopper',                                 // 383\n  function($rootScope, $meteorCollection, $meteorCollectionFS, $meteorStopper) {                              // 384\n    var scopeProto = Object.getPrototypeOf($rootScope);                                                       // 385\n    scopeProto.$meteorCollection = $meteorStopper($meteorCollection);                                         // 386\n    scopeProto.$meteorCollectionFS = $meteorStopper($meteorCollectionFS);                                     // 387\n }]);                                                                                                         // 388\n                                                                                                              // 389\n                                                                                                              // 390\n// Local utilities                                                                                            // 391\nvar collectionUtils = {                                                                                       // 392\n                                                                                                              // 393\n  findIndexById: function(collection, doc) {                                                                  // 394\n    var foundDoc = _.find(collection, function(colDoc) {                                                      // 395\n      // EJSON.equals used to compare Mongo.ObjectIDs and Strings.                                            // 396\n      return EJSON.equals(colDoc._id, doc._id);                                                               // 397\n    });                                                                                                       // 398\n    return _.indexOf(collection, foundDoc);                                                                   // 399\n  },                                                                                                          // 400\n                                                                                                              // 401\n  // Finds changes between two collections and saves differences.                                             // 402\n  diff: function(newCollection, oldCollection, diffMethod) {                                                  // 403\n    var changes = {added: [], removed: [], changed: []};                                                      // 404\n                                                                                                              // 405\n    diffMethod(oldCollection, newCollection, {                                                                // 406\n      addedAt: function(id, item, index) {                                                                    // 407\n        changes.added.push({item: item, index: index});                                                       // 408\n      },                                                                                                      // 409\n                                                                                                              // 410\n      removedAt: function(id, item, index) {                                                                  // 411\n        changes.removed.push({item: item, index: index});                                                     // 412\n      },                                                                                                      // 413\n                                                                                                              // 414\n      changedAt: function(id, updates, index, oldItem) {                                                      // 415\n        changes.changed.push({selector: id, modifier: updates});                                              // 416\n      },                                                                                                      // 417\n                                                                                                              // 418\n      movedTo: function(id, item, fromIndex, toIndex) {                                                       // 419\n        // XXX do we need this?                                                                               // 420\n      }                                                                                                       // 421\n    });                                                                                                       // 422\n                                                                                                              // 423\n    return changes;                                                                                           // 424\n  }                                                                                                           // 425\n};                                                                                                            // 426\n                                                                                                              // 427\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular-meteor-data/modules/angular-meteor-object.js                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\nvar angularMeteorObject = angular.module('angular-meteor.object', ['angular-meteor.utils', 'angular-meteor.subscribe', 'angular-meteor.collection', 'getUpdates', 'diffArray']);\n                                                                                                              // 4\nangularMeteorObject.factory('AngularMeteorObject', [                                                          // 5\n  '$q', '$meteorSubscribe', '$meteorUtils', 'diffArray', 'getUpdates', 'AngularMeteorCollection',             // 6\n  function($q, $meteorSubscribe, $meteorUtils, diffArray, getUpdates, AngularMeteorCollection) {              // 7\n    // A list of internals properties to not watch for, nor pass to the Document on update and etc.           // 8\n    AngularMeteorObject.$$internalProps = [                                                                   // 9\n      '$$collection', '$$options', '$$id', '$$hashkey', '$$internalProps', '$$scope',                         // 10\n      'save', 'reset', 'subscribe', 'stop', 'autorunComputation', 'unregisterAutoBind', 'unregisterAutoDestroy', 'getRawObject',\n      '_auto', '_setAutos', '_eventEmitter', '_serverBackup', '_updateDiff', '_updateParallel'                // 12\n    ];                                                                                                        // 13\n                                                                                                              // 14\n    function AngularMeteorObject (collection, id, options){                                                   // 15\n      // Make data not be an object so we can extend it to preserve                                           // 16\n      // Collection Helpers and the like                                                                      // 17\n      var data = new function SubObject() {};                                                                 // 18\n      var doc = collection.findOne(id, options);                                                              // 19\n      var collectionExtension = _.pick(AngularMeteorCollection, '_updateParallel');                           // 20\n      angular.extend(data, doc);                                                                              // 21\n      angular.extend(data, AngularMeteorObject);                                                              // 22\n      angular.extend(data, collectionExtension);                                                              // 23\n                                                                                                              // 24\n      data._serverBackup = doc || {};                                                                         // 25\n      data.$$collection = collection;                                                                         // 26\n      data.$$options = options;                                                                               // 27\n      data.$$id = id || new Mongo.ObjectID();                                                                 // 28\n                                                                                                              // 29\n      return data;                                                                                            // 30\n    }                                                                                                         // 31\n                                                                                                              // 32\n    AngularMeteorObject.getRawObject = function () {                                                          // 33\n      return angular.copy(_.omit(this, this.$$internalProps));                                                // 34\n    };                                                                                                        // 35\n                                                                                                              // 36\n    AngularMeteorObject.subscribe = function () {                                                             // 37\n      $meteorSubscribe.subscribe.apply(this, arguments);                                                      // 38\n      return this;                                                                                            // 39\n    };                                                                                                        // 40\n                                                                                                              // 41\n    AngularMeteorObject.save = function(custom) {                                                             // 42\n      var deferred = $q.defer();                                                                              // 43\n      var collection = this.$$collection;                                                                     // 44\n      var createFulfill = _.partial($meteorUtils.fulfill, deferred, null);                                    // 45\n      var oldDoc = collection.findOne(this.$$id);                                                             // 46\n      var mods;                                                                                               // 47\n                                                                                                              // 48\n      // update                                                                                               // 49\n      if (oldDoc) {                                                                                           // 50\n        if (custom)                                                                                           // 51\n          mods = { $set: custom };                                                                            // 52\n        else {                                                                                                // 53\n          mods = getUpdates(oldDoc, this.getRawObject());                                                     // 54\n          // If there are no updates, there is nothing to do here, returning                                  // 55\n          if (_.isEmpty(mods)) {                                                                              // 56\n            return $q.when({ action: 'updated' });                                                            // 57\n          }                                                                                                   // 58\n        }                                                                                                     // 59\n                                                                                                              // 60\n        // NOTE: do not use #upsert() method, since it does not exist in some collections                     // 61\n        this._updateDiff(mods, createFulfill({ action: 'updated' }));                                         // 62\n      }                                                                                                       // 63\n      // insert                                                                                               // 64\n      else {                                                                                                  // 65\n        if (custom)                                                                                           // 66\n          mods = _.clone(custom);                                                                             // 67\n        else                                                                                                  // 68\n          mods = this.getRawObject();                                                                         // 69\n                                                                                                              // 70\n        mods._id = this.$$id;                                                                                 // 71\n        collection.insert(mods, createFulfill({ action: 'inserted' }));                                       // 72\n      }                                                                                                       // 73\n                                                                                                              // 74\n      return deferred.promise;                                                                                // 75\n    };                                                                                                        // 76\n                                                                                                              // 77\n    AngularMeteorObject._updateDiff = function(update, callback) {                                            // 78\n      var selector = this.$$id;                                                                               // 79\n      AngularMeteorCollection._updateDiff.call(this, selector, update, callback);                             // 80\n    };                                                                                                        // 81\n                                                                                                              // 82\n    AngularMeteorObject.reset = function(keepClientProps) {                                                   // 83\n      var self = this;                                                                                        // 84\n      var options = this.$$options;                                                                           // 85\n      var id = this.$$id;                                                                                     // 86\n      var doc = this.$$collection.findOne(id, options);                                                       // 87\n                                                                                                              // 88\n      if (doc) {                                                                                              // 89\n        // extend SubObject                                                                                   // 90\n        var docKeys = _.keys(doc);                                                                            // 91\n        var docExtension = _.pick(doc, docKeys);                                                              // 92\n        var clientProps;                                                                                      // 93\n                                                                                                              // 94\n        angular.extend(Object.getPrototypeOf(self), Object.getPrototypeOf(doc));                              // 95\n        _.extend(self, docExtension);                                                                         // 96\n        _.extend(self._serverBackup, docExtension);                                                           // 97\n                                                                                                              // 98\n        if (keepClientProps) {                                                                                // 99\n          clientProps = _.intersection(_.keys(self), _.keys(self._serverBackup));                             // 100\n        } else {                                                                                              // 101\n          clientProps = _.keys(self);                                                                         // 102\n        }                                                                                                     // 103\n                                                                                                              // 104\n        var serverProps = _.keys(doc);                                                                        // 105\n        var removedKeys = _.difference(clientProps, serverProps, self.$$internalProps);                       // 106\n                                                                                                              // 107\n        removedKeys.forEach(function (prop) {                                                                 // 108\n          delete self[prop];                                                                                  // 109\n          delete self._serverBackup[prop];                                                                    // 110\n        });                                                                                                   // 111\n      }                                                                                                       // 112\n                                                                                                              // 113\n      else {                                                                                                  // 114\n        _.keys(this.getRawObject()).forEach(function(prop) {                                                  // 115\n          delete self[prop];                                                                                  // 116\n        });                                                                                                   // 117\n                                                                                                              // 118\n        self._serverBackup = {};                                                                              // 119\n      }                                                                                                       // 120\n    };                                                                                                        // 121\n                                                                                                              // 122\n    AngularMeteorObject.stop = function () {                                                                  // 123\n      if (this.unregisterAutoDestroy)                                                                         // 124\n        this.unregisterAutoDestroy();                                                                         // 125\n                                                                                                              // 126\n      if (this.unregisterAutoBind)                                                                            // 127\n        this.unregisterAutoBind();                                                                            // 128\n                                                                                                              // 129\n      if (this.autorunComputation && this.autorunComputation.stop)                                            // 130\n        this.autorunComputation.stop();                                                                       // 131\n    };                                                                                                        // 132\n                                                                                                              // 133\n    return AngularMeteorObject;                                                                               // 134\n}]);                                                                                                          // 135\n                                                                                                              // 136\n                                                                                                              // 137\nangularMeteorObject.factory('$meteorObject', [                                                                // 138\n  '$rootScope', '$meteorUtils', 'getUpdates', 'AngularMeteorObject',                                          // 139\n  function($rootScope, $meteorUtils, getUpdates, AngularMeteorObject) {                                       // 140\n    function $meteorObject(collection, id, auto, options) {                                                   // 141\n      // Validate parameters                                                                                  // 142\n      if (!collection) {                                                                                      // 143\n        throw new TypeError(\"The first argument of $meteorObject is undefined.\");                             // 144\n      }                                                                                                       // 145\n                                                                                                              // 146\n      if (!angular.isFunction(collection.findOne)) {                                                          // 147\n        throw new TypeError(\"The first argument of $meteorObject must be a function or a have a findOne function property.\");\n      }                                                                                                       // 149\n                                                                                                              // 150\n      var data = new AngularMeteorObject(collection, id, options);                                            // 151\n      data._auto = auto !== false; // Making auto default true - http://stackoverflow.com/a/15464208/1426570  // 152\n      angular.extend(data, $meteorObject);                                                                    // 153\n      data._setAutos();                                                                                       // 154\n      return data;                                                                                            // 155\n    }                                                                                                         // 156\n                                                                                                              // 157\n    $meteorObject._setAutos = function() {                                                                    // 158\n      var self = this;                                                                                        // 159\n                                                                                                              // 160\n      this.autorunComputation = $meteorUtils.autorun($rootScope, function() {                                 // 161\n        self.reset(true);                                                                                     // 162\n      });                                                                                                     // 163\n                                                                                                              // 164\n      // Deep watches the model and performs autobind                                                         // 165\n      this.unregisterAutoBind = this._auto && $rootScope.$watch(function(){                                   // 166\n        return self.getRawObject();                                                                           // 167\n      }, function (item, oldItem) {                                                                           // 168\n        if (item !== oldItem) self.save();                                                                    // 169\n      }, true);                                                                                               // 170\n                                                                                                              // 171\n      this.unregisterAutoDestroy = $rootScope.$on('$destroy', function() {                                    // 172\n        if (self && self.stop) {                                                                              // 173\n          self.stop();                                                                                        // 174\n        }                                                                                                     // 175\n      });                                                                                                     // 176\n    };                                                                                                        // 177\n                                                                                                              // 178\n    return $meteorObject;                                                                                     // 179\n}]);                                                                                                          // 180\n                                                                                                              // 181\nangularMeteorObject.run([                                                                                     // 182\n  '$rootScope', '$meteorObject', '$meteorStopper',                                                            // 183\n  function ($rootScope, $meteorObject, $meteorStopper) {                                                      // 184\n    var scopeProto = Object.getPrototypeOf($rootScope);                                                       // 185\n    scopeProto.$meteorObject = $meteorStopper($meteorObject);                                                 // 186\n}]);                                                                                                          // 187\n                                                                                                              // 188\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular-meteor-data/modules/angular-meteor-user.js                                                //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\nvar angularMeteorUser = angular.module('angular-meteor.user', ['angular-meteor.utils']);                      // 3\n                                                                                                              // 4\n// requires package 'accounts-password'                                                                       // 5\nangularMeteorUser.service('$meteorUser', [                                                                    // 6\n  '$rootScope', '$meteorUtils', '$q',                                                                         // 7\n  function($rootScope, $meteorUtils, $q){                                                                     // 8\n    var pack = Package['accounts-base'];                                                                      // 9\n    if (!pack) return;                                                                                        // 10\n                                                                                                              // 11\n    var self = this;                                                                                          // 12\n    var Accounts = pack.Accounts;                                                                             // 13\n                                                                                                              // 14\n    this.waitForUser = function(){                                                                            // 15\n                                                                                                              // 16\n      var deferred = $q.defer();                                                                              // 17\n                                                                                                              // 18\n      $meteorUtils.autorun($rootScope, function(){                                                            // 19\n        if ( !Meteor.loggingIn() )                                                                            // 20\n          deferred.resolve( Meteor.user() );                                                                  // 21\n      });                                                                                                     // 22\n                                                                                                              // 23\n      return deferred.promise;                                                                                // 24\n    };                                                                                                        // 25\n                                                                                                              // 26\n    this.requireUser = function(){                                                                            // 27\n                                                                                                              // 28\n      var deferred = $q.defer();                                                                              // 29\n                                                                                                              // 30\n      $meteorUtils.autorun($rootScope, function(){                                                            // 31\n        if ( !Meteor.loggingIn() ) {                                                                          // 32\n          if ( Meteor.user() == null)                                                                         // 33\n            deferred.reject(\"AUTH_REQUIRED\");                                                                 // 34\n          else                                                                                                // 35\n            deferred.resolve( Meteor.user() );                                                                // 36\n        }                                                                                                     // 37\n      });                                                                                                     // 38\n                                                                                                              // 39\n      return deferred.promise;                                                                                // 40\n    };                                                                                                        // 41\n                                                                                                              // 42\n    this.requireValidUser = function(validatorFn) {                                                           // 43\n      return self.requireUser().then(function(user){                                                          // 44\n        var valid = validatorFn( user );                                                                      // 45\n                                                                                                              // 46\n        if ( valid === true )                                                                                 // 47\n          return user;                                                                                        // 48\n        else if ( typeof valid === \"string\" )                                                                 // 49\n          return $q.reject( valid );                                                                          // 50\n        else                                                                                                  // 51\n          return $q.reject( \"FORBIDDEN\" );                                                                    // 52\n\t    });                                                                                                      // 53\n\t  };                                                                                                         // 54\n                                                                                                              // 55\n    this.loginWithPassword = $meteorUtils.promissor(Meteor, 'loginWithPassword');                             // 56\n    this.createUser = $meteorUtils.promissor(Accounts, 'createUser');                                         // 57\n    this.changePassword = $meteorUtils.promissor(Accounts, 'changePassword');                                 // 58\n    this.forgotPassword = $meteorUtils.promissor(Accounts, 'forgotPassword');                                 // 59\n    this.resetPassword = $meteorUtils.promissor(Accounts, 'resetPassword');                                   // 60\n    this.verifyEmail = $meteorUtils.promissor(Accounts, 'verifyEmail');                                       // 61\n    this.logout = $meteorUtils.promissor(Meteor, 'logout');                                                   // 62\n    this.logoutOtherClients = $meteorUtils.promissor(Meteor, 'logoutOtherClients');                           // 63\n    this.loginWithFacebook = $meteorUtils.promissor(Meteor, 'loginWithFacebook');                             // 64\n    this.loginWithTwitter = $meteorUtils.promissor(Meteor, 'loginWithTwitter');                               // 65\n    this.loginWithGoogle = $meteorUtils.promissor(Meteor, 'loginWithGoogle');                                 // 66\n    this.loginWithGithub = $meteorUtils.promissor(Meteor, 'loginWithGithub');                                 // 67\n    this.loginWithMeteorDeveloperAccount = $meteorUtils.promissor(Meteor, 'loginWithMeteorDeveloperAccount');\n    this.loginWithMeetup = $meteorUtils.promissor(Meteor, 'loginWithMeetup');                                 // 69\n    this.loginWithWeibo = $meteorUtils.promissor(Meteor, 'loginWithWeibo');                                   // 70\n  }                                                                                                           // 71\n]);                                                                                                           // 72\n                                                                                                              // 73\nangularMeteorUser.run([                                                                                       // 74\n  '$rootScope', '$meteorUtils',                                                                               // 75\n  function($rootScope, $meteorUtils){                                                                         // 76\n    $meteorUtils.autorun($rootScope, function(){                                                              // 77\n      if (!Meteor.user) return;                                                                               // 78\n      $rootScope.currentUser = Meteor.user();                                                                 // 79\n      $rootScope.loggingIn = Meteor.loggingIn();                                                              // 80\n    });                                                                                                       // 81\n  }                                                                                                           // 82\n]);                                                                                                           // 83\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular-meteor-data/modules/angular-meteor-methods.js                                             //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\nvar angularMeteorMethods = angular.module('angular-meteor.methods', ['angular-meteor.utils']);                // 3\n                                                                                                              // 4\nangularMeteorMethods.service('$meteorMethods', [                                                              // 5\n  '$q', '$meteorUtils',                                                                                       // 6\n  function($q, $meteorUtils) {                                                                                // 7\n    this.call = function(){                                                                                   // 8\n      var deferred = $q.defer();                                                                              // 9\n      var fulfill = $meteorUtils.fulfill(deferred);                                                           // 10\n      var args = _.toArray(arguments).concat(fulfill);                                                        // 11\n      Meteor.call.apply(this, args);                                                                          // 12\n      return deferred.promise;                                                                                // 13\n    };                                                                                                        // 14\n  }                                                                                                           // 15\n]);                                                                                                           // 16\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular-meteor-data/modules/angular-meteor-session.js                                             //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\nvar angularMeteorSession = angular.module('angular-meteor.session', ['angular-meteor.utils']);                // 2\n                                                                                                              // 3\nangularMeteorSession.factory('$meteorSession', ['$meteorUtils', '$parse',                                     // 4\n  function ($meteorUtils, $parse) {                                                                           // 5\n    return function (session) {                                                                               // 6\n                                                                                                              // 7\n      return {                                                                                                // 8\n                                                                                                              // 9\n        bind: function(scope, model) {                                                                        // 10\n          var getter = $parse(model);                                                                         // 11\n          var setter = getter.assign;                                                                         // 12\n          $meteorUtils.autorun(scope, function() {                                                            // 13\n            setter(scope, Session.get(session));                                                              // 14\n          });                                                                                                 // 15\n                                                                                                              // 16\n          scope.$watch(model, function(newItem, oldItem) {                                                    // 17\n            Session.set(session, getter(scope));                                                              // 18\n          }, true);                                                                                           // 19\n                                                                                                              // 20\n        }                                                                                                     // 21\n      };                                                                                                      // 22\n    }                                                                                                         // 23\n  }                                                                                                           // 24\n]);                                                                                                           // 25\n                                                                                                              // 26\n                                                                                                              // 27\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular-meteor-data/modules/angular-meteor-reactive-scope.js                                      //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n/**                                                                                                           // 1\n * Created by netanel on 29/12/14.                                                                            // 2\n */                                                                                                           // 3\nvar angularMeteorReactiveScope = angular.module('angular-meteor.reactive-scope', []);                         // 4\n                                                                                                              // 5\nangularMeteorReactiveScope.run(['$rootScope', '$parse', function($rootScope, $parse) {                        // 6\n  Object.getPrototypeOf($rootScope).getReactively = function(property, objectEquality) {                      // 7\n    var self = this;                                                                                          // 8\n    var getValue = $parse(property);                                                                          // 9\n    objectEquality = !!objectEquality;                                                                        // 10\n                                                                                                              // 11\n    if (!self.hasOwnProperty('$$trackerDeps')) {                                                              // 12\n      self.$$trackerDeps = {};                                                                                // 13\n    }                                                                                                         // 14\n                                                                                                              // 15\n    if (!self.$$trackerDeps[property]) {                                                                      // 16\n      self.$$trackerDeps[property] = new Tracker.Dependency();                                                // 17\n                                                                                                              // 18\n      self.$watch(function() {                                                                                // 19\n        return getValue(self)                                                                                 // 20\n      }, function(newVal, oldVal) {                                                                           // 21\n        if (newVal !== oldVal) {                                                                              // 22\n          self.$$trackerDeps[property].changed();                                                             // 23\n        }                                                                                                     // 24\n      }, objectEquality);                                                                                     // 25\n    }                                                                                                         // 26\n                                                                                                              // 27\n    self.$$trackerDeps[property].depend();                                                                    // 28\n                                                                                                              // 29\n    return getValue(self);                                                                                    // 30\n  };                                                                                                          // 31\n  Object.getPrototypeOf($rootScope).getCollectionReactively = function(property) {                            // 32\n    var self = this;                                                                                          // 33\n    var getValue = $parse(property);                                                                          // 34\n                                                                                                              // 35\n                                                                                                              // 36\n    if (!self.hasOwnProperty('$$trackerDeps')) {                                                              // 37\n      self.$$trackerDeps = {};                                                                                // 38\n    }                                                                                                         // 39\n                                                                                                              // 40\n    if (!self.$$trackerDeps[property]) {                                                                      // 41\n      self.$$trackerDeps[property] = new Tracker.Dependency();                                                // 42\n                                                                                                              // 43\n      self.$watchCollection(property, function() {                                                            // 44\n        self.$$trackerDeps[property].changed();                                                               // 45\n      });                                                                                                     // 46\n    }                                                                                                         // 47\n                                                                                                              // 48\n    self.$$trackerDeps[property].depend();                                                                    // 49\n                                                                                                              // 50\n    return getValue(self);                                                                                    // 51\n  };                                                                                                          // 52\n}]);                                                                                                          // 53\n                                                                                                              // 54\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular-meteor-data/modules/angular-meteor-utils.js                                               //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\nvar angularMeteorUtils = angular.module('angular-meteor.utils', []);                                          // 2\n                                                                                                              // 3\nangularMeteorUtils.service('$meteorUtils', [                                                                  // 4\n  '$q', '$timeout',                                                                                           // 5\n  function ($q, $timeout) {                                                                                   // 6\n    var self = this;                                                                                          // 7\n    this.getCollectionByName = function(string){                                                              // 8\n      return Mongo.Collection.get(string);                                                                    // 9\n    };                                                                                                        // 10\n    this.autorun = function(scope, fn) {                                                                      // 11\n      // wrapping around Deps.autorun                                                                         // 12\n      var comp = Tracker.autorun(function(c) {                                                                // 13\n        fn(c);                                                                                                // 14\n                                                                                                              // 15\n        // this is run immediately for the first call                                                         // 16\n        // but after that, we need to $apply to start Angular digest                                          // 17\n        if (!c.firstRun) $timeout(angular.noop, 0);                                                           // 18\n      });                                                                                                     // 19\n      // stop autorun when scope is destroyed                                                                 // 20\n      scope.$on('$destroy', function() {                                                                      // 21\n        comp.stop();                                                                                          // 22\n      });                                                                                                     // 23\n      // return autorun object so that it can be stopped manually                                             // 24\n      return comp;                                                                                            // 25\n    };                                                                                                        // 26\n    // Borrowed from angularFire - https://github.com/firebase/angularfire/blob/master/src/utils.js#L445-L454\n    this.stripDollarPrefixedKeys = function (data) {                                                          // 28\n      if( !angular.isObject(data) ||                                                                          // 29\n        data instanceof Date ||                                                                               // 30\n        data instanceof File ||                                                                               // 31\n        EJSON.toJSONValue(data).$type === 'oid' ||                                                            // 32\n        (typeof FS === 'object' && data instanceof FS.File)) {                                                // 33\n        return data;                                                                                          // 34\n      }                                                                                                       // 35\n      var out = angular.isArray(data)? [] : {};                                                               // 36\n      angular.forEach(data, function(v,k) {                                                                   // 37\n        if(typeof k !== 'string' || k.charAt(0) !== '$') {                                                    // 38\n          out[k] = self.stripDollarPrefixedKeys(v);                                                           // 39\n        }                                                                                                     // 40\n      });                                                                                                     // 41\n      return out;                                                                                             // 42\n    };                                                                                                        // 43\n    // Returns a callback which fulfills promise                                                              // 44\n    this.fulfill = function(deferred, boundError, boundResult) {                                              // 45\n      return function(err, result) {                                                                          // 46\n        if (err)                                                                                              // 47\n          deferred.reject(boundError == null ? err : boundError);                                             // 48\n        else if (typeof boundResult == \"function\")                                                            // 49\n          deferred.resolve(boundResult == null ? result : boundResult(result));                               // 50\n        else                                                                                                  // 51\n          deferred.resolve(boundResult == null ? result : boundResult);                                       // 52\n      };                                                                                                      // 53\n    };                                                                                                        // 54\n    // creates a function which invokes method with the given arguments and returns a promise                 // 55\n    this.promissor = function(obj, method) {                                                                  // 56\n      return function() {                                                                                     // 57\n        var deferred = $q.defer();                                                                            // 58\n        var fulfill = self.fulfill(deferred);                                                                 // 59\n        var args = _.toArray(arguments).concat(fulfill);                                                      // 60\n        obj[method].apply(obj, args);                                                                         // 61\n        return deferred.promise;                                                                              // 62\n      };                                                                                                      // 63\n    };                                                                                                        // 64\n  }                                                                                                           // 65\n]);                                                                                                           // 66\n                                                                                                              // 67\nangularMeteorUtils.run(['$rootScope', '$meteorUtils',                                                         // 68\n  function($rootScope, $meteorUtils) {                                                                        // 69\n    Object.getPrototypeOf($rootScope).$meteorAutorun = function(fn) {                                         // 70\n      return $meteorUtils.autorun(this, fn);                                                                  // 71\n    };                                                                                                        // 72\n}]);                                                                                                          // 73\n                                                                                                              // 74\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular-meteor-data/modules/angular-meteor-camera.js                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\nvar angularMeteorCamera = angular.module('angular-meteor.camera', ['angular-meteor.utils']);                  // 3\n                                                                                                              // 4\n// requires package 'mdg:camera'                                                                              // 5\nangularMeteorCamera.service('$meteorCamera', [                                                                // 6\n  '$q', '$meteorUtils',                                                                                       // 7\n  function ($q, $meteorUtils) {                                                                               // 8\n    var pack = Package['mdg:camera'];                                                                         // 9\n    if (!pack) return;                                                                                        // 10\n                                                                                                              // 11\n    var MeteorCamera = pack.MeteorCamera;                                                                     // 12\n                                                                                                              // 13\n    this.getPicture = function(options){                                                                      // 14\n      options = options || {};                                                                                // 15\n      var deferred = $q.defer();                                                                              // 16\n      MeteorCamera.getPicture(options, $meteorUtils.fulfill(deferred));                                       // 17\n      return deferred.promise;                                                                                // 18\n    };                                                                                                        // 19\n  }                                                                                                           // 20\n]);                                                                                                           // 21\n                                                                                                              // 22\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular-meteor-data/angular-meteor.js                                                             //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Define angular-meteor and its dependencies                                                                 // 1\nvar angularMeteor = angular.module('angular-meteor', [                                                        // 2\n  'angular-meteor.subscribe',                                                                                 // 3\n  'angular-meteor.collection',                                                                                // 4\n  'angular-meteor.object',                                                                                    // 5\n  'angular-meteor.user',                                                                                      // 6\n  'angular-meteor.methods',                                                                                   // 7\n  'angular-meteor.session',                                                                                   // 8\n  'angular-meteor.reactive-scope',                                                                            // 9\n  'angular-meteor.utils',                                                                                     // 10\n  'angular-meteor.camera'                                                                                     // 11\n]);                                                                                                           // 12\n                                                                                                              // 13\nangularMeteor.run(['$compile', '$document', '$rootScope', function ($compile, $document, $rootScope) {        // 14\n    // Recompile after iron:router builds page                                                                // 15\n    if(Package['iron:router']) {                                                                              // 16\n      var appLoaded = false;                                                                                  // 17\n      Package['iron:router'].Router.onAfterAction(function(req, res, next) {                                  // 18\n        Tracker.afterFlush(function() {                                                                       // 19\n          if (!appLoaded) {                                                                                   // 20\n            $compile($document)($rootScope);                                                                  // 21\n            if (!$rootScope.$$phase) $rootScope.$apply();                                                     // 22\n            appLoaded = true;                                                                                 // 23\n          }                                                                                                   // 24\n        })                                                                                                    // 25\n      });                                                                                                     // 26\n    }                                                                                                         // 27\n  }]);                                                                                                        // 28\n                                                                                                              // 29\n// Putting all services under $meteor service for syntactic sugar                                             // 30\nangularMeteor.service('$meteor', ['$meteorCollection', '$meteorCollectionFS', '$meteorObject', '$meteorMethods', '$meteorSession', '$meteorSubscribe', '$meteorUtils', '$meteorCamera', '$meteorUser',\n  function($meteorCollection, $meteorCollectionFS, $meteorObject, $meteorMethods, $meteorSession, $meteorSubscribe, $meteorUtils, $meteorCamera, $meteorUser){\n    this.collection = $meteorCollection;                                                                      // 33\n    this.collectionFS = $meteorCollectionFS;                                                                  // 34\n    this.object = $meteorObject;                                                                              // 35\n    this.subscribe = $meteorSubscribe.subscribe;                                                              // 36\n    this.call = $meteorMethods.call;                                                                          // 37\n    this.loginWithPassword = $meteorUser.loginWithPassword;                                                   // 38\n    this.requireUser = $meteorUser.requireUser;                                                               // 39\n    this.requireValidUser = $meteorUser.requireValidUser;                                                     // 40\n    this.waitForUser = $meteorUser.waitForUser;                                                               // 41\n    this.createUser = $meteorUser.createUser;                                                                 // 42\n    this.changePassword = $meteorUser.changePassword;                                                         // 43\n    this.forgotPassword = $meteorUser.forgotPassword;                                                         // 44\n    this.resetPassword = $meteorUser.resetPassword;                                                           // 45\n    this.verifyEmail = $meteorUser.verifyEmail;                                                               // 46\n    this.loginWithMeteorDeveloperAccount = $meteorUser.loginWithMeteorDeveloperAccount;                       // 47\n    this.loginWithFacebook = $meteorUser.loginWithFacebook;                                                   // 48\n    this.loginWithGithub = $meteorUser.loginWithGithub;                                                       // 49\n    this.loginWithGoogle = $meteorUser.loginWithGoogle;                                                       // 50\n    this.loginWithMeetup = $meteorUser.loginWithMeetup;                                                       // 51\n    this.loginWithTwitter = $meteorUser.loginWithTwitter;                                                     // 52\n    this.loginWithWeibo = $meteorUser.loginWithWeibo;                                                         // 53\n    this.logout = $meteorUser.logout;                                                                         // 54\n    this.logoutOtherClients = $meteorUser.logoutOtherClients;                                                 // 55\n    this.session = $meteorSession;                                                                            // 56\n    this.autorun = $meteorUtils.autorun;                                                                      // 57\n    this.getCollectionByName = $meteorUtils.getCollectionByName;                                              // 58\n    this.getPicture = $meteorCamera.getPicture;                                                               // 59\n}]);                                                                                                          // 60\n                                                                                                              // 61\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['angular-meteor-data'] = {};\n\n})();\n","servePath":"/packages/angular-meteor-data.js","sourceMap":{"version":3,"sources":["/packages/angular-meteor-data/lib/diff-array.js","/packages/angular-meteor-data/lib/get-updates.js","/packages/angular-meteor-data/modules/angular-meteor-subscribe.js","/packages/angular-meteor-data/modules/angular-meteor-stopper.js","/packages/angular-meteor-data/modules/angular-meteor-collection.js","/packages/angular-meteor-data/modules/angular-meteor-object.js","/packages/angular-meteor-data/modules/angular-meteor-user.js","/packages/angular-meteor-data/modules/angular-meteor-methods.js","/packages/angular-meteor-data/modules/angular-meteor-session.js","/packages/angular-meteor-data/modules/angular-meteor-reactive-scope.js","/packages/angular-meteor-data/modules/angular-meteor-utils.js","/packages/angular-meteor-data/modules/angular-meteor-camera.js","/packages/angular-meteor-data/angular-meteor.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oH;;;;;;;;;;;;;;;;;;ACzoH;;;;;;;;;;;;;;;;;;AClMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mH;;;;;;;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,moH;;;;;;;;;;;;;;;;;;AC1aoH;;;;;;;;;;;;;;;;;;AC3LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mH;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mH;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mH;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mH;;;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mH;;;;;;;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mH;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mH","file":"/packages/angular-meteor-data.js","sourcesContent":["'use strict';\n\nvar module = angular.module('diffArray', ['getUpdates']);\n\nmodule.factory('diffArray', ['getUpdates',\n  function(getUpdates) {\n    var LocalCollection = Package['minimongo'].LocalCollection;\n    var idStringify = LocalCollection._idStringify || Package['mongo-id'].MongoID.idStringify;\n    var idParse = LocalCollection._idParse || Package['mongo-id'].MongoID.idParse;\n\n    // Calculates the differences between `lastSeqArray` and\n    // `seqArray` and calls appropriate functions from `callbacks`.\n    // Reuses Minimongo's diff algorithm implementation.\n    // XXX Should be replaced with the original diffArray function here:\n    // https://github.com/meteor/meteor/blob/devel/packages/observe-sequence/observe_sequence.js#L152\n    // When it will become nested as well, tracking here: https://github.com/meteor/meteor/issues/3764\n    function diffArray(lastSeqArray, seqArray, callbacks, preventNestedDiff) {\n      preventNestedDiff = !!preventNestedDiff;\n\n      var diffFn = Package.minimongo.LocalCollection._diffQueryOrderedChanges ||\n        Package['diff-sequence'].DiffSequence.diffQueryOrderedChanges;\n\n      var oldObjIds = [];\n      var newObjIds = [];\n      var posOld = {}; // maps from idStringify'd ids\n      var posNew = {}; // ditto\n      var posCur = {};\n      var lengthCur = lastSeqArray.length;\n\n      _.each(seqArray, function (doc, i) {\n        newObjIds.push({_id: doc._id});\n        posNew[idStringify(doc._id)] = i;\n      });\n\n      _.each(lastSeqArray, function (doc, i) {\n        oldObjIds.push({_id: doc._id});\n        posOld[idStringify(doc._id)] = i;\n        posCur[idStringify(doc._id)] = i;\n      });\n\n      // Arrays can contain arbitrary objects. We don't diff the\n      // objects. Instead we always fire 'changedAt' callback on every\n      // object. The consumer of `observe-sequence` should deal with\n      // it appropriately.\n      diffFn(oldObjIds, newObjIds, {\n        addedBefore: function (id, doc, before) {\n          var position = before ? posCur[idStringify(before)] : lengthCur;\n\n          _.each(posCur, function (pos, id) {\n            if (pos >= position) posCur[id]++;\n          });\n\n          lengthCur++;\n          posCur[idStringify(id)] = position;\n\n          callbacks.addedAt(\n            id,\n            seqArray[posNew[idStringify(id)]],\n            position,\n            before\n          );\n        },\n\n        movedBefore: function (id, before) {\n          var prevPosition = posCur[idStringify(id)];\n          var position = before ? posCur[idStringify(before)] : lengthCur - 1;\n\n          _.each(posCur, function (pos, id) {\n            if (pos >= prevPosition && pos <= position)\n              posCur[id]--;\n            else if (pos <= prevPosition && pos >= position)\n              posCur[id]++;\n          });\n\n          posCur[idStringify(id)] = position;\n\n          callbacks.movedTo(\n            id,\n            seqArray[posNew[idStringify(id)]],\n            prevPosition,\n            position,\n            before\n          );\n        },\n        removed: function (id) {\n          var prevPosition = posCur[idStringify(id)];\n\n          _.each(posCur, function (pos, id) {\n            if (pos >= prevPosition) posCur[id]--;\n          });\n\n          delete posCur[idStringify(id)];\n          lengthCur--;\n\n          callbacks.removedAt(\n            id,\n            lastSeqArray[posOld[idStringify(id)]],\n            prevPosition\n          );\n        }\n      });\n\n      _.each(posNew, function (pos, idString) {\n        if (!_.has(posOld, idString)) return;\n\n        var id = idParse(idString);\n        var newItem = seqArray[pos] || {};\n        var oldItem = lastSeqArray[posOld[idString]];\n        var updates = getUpdates(oldItem, newItem, preventNestedDiff);\n\n        if (!_.isEmpty(updates))\n          callbacks.changedAt(id, updates, pos, oldItem);\n      });\n    }\n\n    diffArray.deepCopyChanges = function (oldItem, newItem) {\n      var setDiff = getUpdates(oldItem, newItem).$set;\n\n      _.each(setDiff, function(v, deepKey) {\n        setDeep(oldItem, deepKey, v);\n      });\n    };\n\n    diffArray.deepCopyRemovals = function (oldItem, newItem) {\n      var unsetDiff = getUpdates(oldItem, newItem).$unset;\n\n      _.each(unsetDiff, function(v, deepKey) {\n        unsetDeep(oldItem, deepKey);\n      });\n    };\n\n    var setDeep = function(obj, deepKey, v) {\n      var split = deepKey.split('.');\n      var initialKeys = _.initial(split);\n      var lastKey = _.last(split);\n\n      initialKeys.reduce(function(subObj, k, i) {\n        var nextKey = split[i + 1];\n\n        if (isNumStr(nextKey)) {\n          if (subObj[k] == null) subObj[k] = [];\n          if (subObj[k].length == parseInt(nextKey)) subObj[k].push(null);\n        }\n\n        else if (subObj[k] == null || !isHash(subObj[k])) {\n          subObj[k] = {};\n        }\n\n        return subObj[k];\n      }, obj);\n\n      var deepObj = getDeep(obj, initialKeys);\n      deepObj[lastKey] = v;\n      return v;\n    };\n\n    var unsetDeep = function(obj, deepKey) {\n      var split = deepKey.split('.');\n      var initialKeys = _.initial(split);\n      var lastKey = _.last(split);\n      var deepObj = getDeep(obj, initialKeys);\n\n      if (_.isArray(deepObj) && isNumStr(lastKey))\n        return !!deepObj.splice(lastKey, 1);\n      else\n        return delete deepObj[lastKey];\n    };\n\n    var getDeep = function(obj, keys) {\n      return keys.reduce(function(subObj, k) {\n        return subObj[k];\n      }, obj);\n    };\n\n    var isHash = function(obj) {\n      return _.isObject(obj) &&\n             Object.getPrototypeOf(obj) === Object.prototype;\n    };\n\n    var isNumStr = function(str) {\n      return str.match(/^\\d+$/);\n    };\n\n    return diffArray;\n}]);\n","'use strict';\n\n// https://github.com/DAB0mB/get-updates\n(function() {\n  var module = angular.module('getUpdates', []);\n\n  var utils = (function() {\n    var rip = function(obj, level) {\n      if (level < 1) return {};\n\n      return _.reduce(obj, function(clone, v, k) {\n        v = _.isObject(v) ? rip(v, --level) : v;\n        clone[k] = v;\n        return clone;\n      }, {});\n    };\n\n    var toPaths = function(obj) {\n      var keys = getKeyPaths(obj);\n      var values = getDeepValues(obj);\n      return _.object(keys, values);\n    };\n\n    var getKeyPaths = function(obj) {\n      var keys = _.keys(obj).map(function(k) {\n        var v = obj[k];\n        if (!_.isObject(v) || _.isEmpty(v) || _.isArray(v)) return k;\n\n        return getKeyPaths(v).map(function(subKey) {\n          return k + '.' + subKey;\n        });\n      });\n\n      return _.flatten(keys);\n    };\n\n    var getDeepValues = function(obj,arr) {\n      arr = arr || [];\n\n      _.values(obj).forEach(function(v) {\n        if (!_.isObject(v) || _.isEmpty(v) || _.isArray(v))\n          arr.push(v);\n        else\n          getDeepValues(v, arr);\n      });\n\n      return arr;\n    };\n\n    var flatten = function(arr) {\n      return arr.reduce(function(flattened, v, i) {\n        if (_.isArray(v) && !_.isEmpty(v))\n          flattened.push.apply(flattened, flatten(v));\n        else\n          flattened.push(v);\n\n        return flattened;\n      }, []);\n    };\n\n    var setFilled = function(obj, k, v) {\n      if (!_.isEmpty(v)) obj[k] = v;\n    };\n\n    var assert = function(result, msg) {\n      if (!result) throwErr(msg);\n    };\n\n    var throwErr = function(msg) {\n      throw Error('get-updates error - ' + msg);\n    };\n\n    return {\n      rip: rip,\n      toPaths: toPaths,\n      getKeyPaths: getKeyPaths,\n      getDeepValues: getDeepValues,\n      setFilled: setFilled,\n      assert: assert,\n      throwErr: throwErr\n    };\n  })();\n\n  var getDifference = (function() {\n    var getDifference = function(src, dst, isShallow) {\n      var level;\n\n      if (isShallow > 1)\n        level = isShallow;\n      else if (isShallow)\n        level = 1;\n\n      if (level) {\n        src = utils.rip(src, level);\n        dst = utils.rip(dst, level);\n      }\n\n      return compare(src, dst);\n    };\n\n    var compare = function(src, dst) {\n      var srcKeys = _.keys(src);\n      var dstKeys = _.keys(dst);\n\n      var keys = _.chain([])\n        .concat(srcKeys)\n        .concat(dstKeys)\n        .uniq()\n        .without('$$hashKey')\n        .value();\n\n      return keys.reduce(function(diff, k) {\n        var srcValue = src[k];\n        var dstValue = dst[k];\n\n        if (_.isDate(srcValue) && _.isDate(dstValue)) {\n          if (srcValue.getTime() != dstValue.getTime()) diff[k] = dstValue;\n        }\n\n        if (_.isObject(srcValue) && _.isObject(dstValue)) {\n          var valueDiff = getDifference(srcValue, dstValue);\n          utils.setFilled(diff, k, valueDiff);\n        }\n\n        else if (srcValue !== dstValue) {\n          diff[k] = dstValue;\n        }\n\n        return diff;\n      }, {});\n    };\n\n    return getDifference;\n  })();\n\n  var getUpdates = (function() {\n    var getUpdates = function(src, dst, isShallow) {\n      utils.assert(_.isObject(src), 'first argument must be an object');\n      utils.assert(_.isObject(dst), 'second argument must be an object');\n\n      var diff = getDifference(src, dst, isShallow);\n      var paths = utils.toPaths(diff);\n\n      var set = createSet(paths);\n      var unset = createUnset(paths);\n      var pull = createPull(unset);\n\n      var updates = {};\n      utils.setFilled(updates, '$set', set);\n      utils.setFilled(updates, '$unset', unset);\n      utils.setFilled(updates, '$pull', pull);\n\n      return updates;\n    };\n\n    var createSet = function(paths) {\n      var undefinedKeys = getUndefinedKeys(paths);\n      return _.omit(paths, undefinedKeys);\n    };\n\n    var createUnset = function(paths) {\n      var undefinedKeys = getUndefinedKeys(paths);\n      var unset = _.pick(paths, undefinedKeys);\n\n      return _.reduce(unset, function(result, v, k) {\n        result[k] = true;\n        return result;\n      }, {});\n    };\n\n    var createPull = function(unset) {\n      var arrKeyPaths = _.keys(unset).map(function(k) {\n        var split = k.match(/(.*)\\.\\d+$/);\n        return split && split[1];\n      });\n\n      return _.compact(arrKeyPaths).reduce(function(pull, k) {\n        pull[k] = null;\n        return pull;\n      }, {});\n    };\n\n    var getUndefinedKeys = function(obj) {\n      return _.keys(obj).filter(function (k) {\n        var v = obj[k];\n        return _.isUndefined(v);\n      });\n    };\n\n    return getUpdates;\n  })();\n\n  module.value('getUpdates', getUpdates);\n})();\n","'use strict';\nvar angularMeteorSubscribe = angular.module('angular-meteor.subscribe', []);\n\nangularMeteorSubscribe.service('$meteorSubscribe', ['$q',\n  function ($q) {\n    var self = this;\n\n    this._subscribe = function(scope, deferred, args) {\n      var subscription = null;\n      var lastArg = args[args.length - 1];\n\n      // User supplied onStop callback\n      // save it for later use and remove\n      // from subscription arguments\n      if (angular.isObject(lastArg) &&\n          angular.isFunction(lastArg.onStop)) {\n        var onStop = lastArg.onStop;\n\n        args.pop();\n      }\n\n      args.push({\n        onReady: function() {\n          deferred.resolve(subscription);\n        },\n        onStop: function(err) {\n          if (!deferred.promise.$$state.status) {\n            if (err)\n              deferred.reject(err);\n            else\n              deferred.reject(new Meteor.Error(\"Subscription Stopped\",\n                \"Subscription stopped by a call to stop method. Either by the client or by the server.\"));\n          } else if (onStop)\n            // After promise was resolved or rejected\n            // call user supplied onStop callback.\n            onStop.apply(this, Array.prototype.slice.call(arguments));\n\n        }\n      });\n\n      subscription =  Meteor.subscribe.apply(scope, args);\n\n      return subscription;\n    };\n\n    this.subscribe = function(){\n      var deferred = $q.defer();\n      var args = Array.prototype.slice.call(arguments);\n      var subscription = null;\n\n      self._subscribe(this, deferred, args);\n\n      return deferred.promise;\n    };\n  }]);\n\nangularMeteorSubscribe.run(['$rootScope', '$q', '$meteorSubscribe',\n  function($rootScope, $q, $meteorSubscribe) {\n    Object.getPrototypeOf($rootScope).$meteorSubscribe = function() {\n      var deferred = $q.defer();\n      var args = Array.prototype.slice.call(arguments);\n\n      var subscription = $meteorSubscribe._subscribe(this, deferred, args);\n\n      this.$on('$destroy', function() {\n        subscription.stop();\n      });\n\n      return deferred.promise;\n    };\n}]);\n","'use strict';\n\nvar angularMeteorStopper = angular.module('angular-meteor.stopper',\n  ['angular-meteor.subscribe']);\n\nangularMeteorStopper.factory('$meteorStopper', ['$q', '$meteorSubscribe',\n  function($q, $meteorSubscribe) {\n    function $meteorStopper($meteorEntity) {\n      return function() {\n        var args = Array.prototype.slice.call(arguments);\n        var meteorEntity = $meteorEntity.apply(this, args);\n\n        angular.extend(meteorEntity, $meteorStopper);\n        meteorEntity.$$scope = this;\n\n        this.$on('$destroy', function () {\n          meteorEntity.stop();\n          if (meteorEntity.subscription) meteorEntity.subscription.stop();\n        });\n\n        return meteorEntity;\n      };\n    }\n\n    $meteorStopper.subscribe = function() {\n      var args = Array.prototype.slice.call(arguments);\n      this.subscription = $meteorSubscribe._subscribe(this.$$scope, $q.defer(), args);\n      return this;\n    };\n\n    return $meteorStopper;\n}]);","'use strict';\n\nvar angularMeteorCollection = angular.module('angular-meteor.collection',\n  ['angular-meteor.stopper', 'angular-meteor.subscribe', 'angular-meteor.utils', 'diffArray']);\n\n// The reason angular meteor collection is a factory function and not something\n// that inherit from array comes from here:\n// http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/\n// We went with the direct extensions approach.\nangularMeteorCollection.factory('AngularMeteorCollection', [\n  '$q', '$meteorSubscribe', '$meteorUtils', '$rootScope', '$timeout', 'diffArray',\n  function($q, $meteorSubscribe, $meteorUtils, $rootScope, $timeout, diffArray) {\n    function AngularMeteorCollection(curDefFunc, collection, diffArrayFunc, autoClientSave) {\n      var data = [];\n      // Server backup data to evaluate what changes come from client\n      // after each server update.\n      data._serverBackup = [];\n      // Array differ function.\n      data._diffArrayFunc = diffArrayFunc;\n      // Handler of the cursor observer.\n      data._hObserve = null;\n      // On new cursor autorun handler\n      // (autorun for reactive variables).\n      data._hNewCurAutorun = null;\n      // On new data autorun handler\n      // (autorun for cursor.fetch).\n      data._hDataAutorun = null;\n\n      if (angular.isDefined(collection)) {\n        data.$$collection = collection;\n      } else {\n        var cursor = curDefFunc();\n        data.$$collection = $meteorUtils.getCollectionByName(cursor.collection.name);\n      }\n\n      angular.extend(data, AngularMeteorCollection);\n      data._startCurAutorun(curDefFunc, autoClientSave);\n\n      return data;\n    }\n\n    AngularMeteorCollection._startCurAutorun = function(curDefFunc, autoClientSave) {\n      var self = this;\n      self._hNewCurAutorun = Tracker.autorun(function() {\n        // When the reactive func gets recomputated we need to stop any previous\n        // observeChanges.\n        Tracker.onInvalidate(function() {\n          self._stopCursor();\n        });\n        if (autoClientSave) {\n          self._setAutoClientSave();\n        }\n        self._updateCursor(curDefFunc(), autoClientSave);\n      });\n    };\n\n    AngularMeteorCollection.subscribe = function() {\n      $meteorSubscribe.subscribe.apply(this, arguments);\n      return this;\n    };\n\n    AngularMeteorCollection.save = function(docs, useUnsetModifier) {\n      // save whole collection\n      if (!docs) docs = this;\n      // save single doc\n      docs = [].concat(docs);\n\n      var promises = docs.map(function(doc) {\n        return this._upsertDoc(doc, useUnsetModifier);\n      }, this);\n\n      var allPromise = $q.all(promises);\n\n      allPromise.finally(function() {\n        // calls digestion loop with no conflicts\n        $timeout(angular.noop);\n      });\n\n      return allPromise;\n    };\n\n    AngularMeteorCollection._upsertDoc = function(doc, useUnsetModifier) {\n      var deferred = $q.defer();\n      var collection = this.$$collection;\n      var createFulfill = _.partial($meteorUtils.fulfill, deferred, null);\n\n      // delete $$hashkey\n      doc = $meteorUtils.stripDollarPrefixedKeys(doc);\n      var docId = doc._id;\n      var isExist = collection.findOne(docId);\n\n      // update\n      if (isExist) {\n        // Deletes _id property (from the copy) so that\n        // it can be $set using update.\n        delete doc._id;\n        var modifier = useUnsetModifier ? {$unset: doc} : {$set: doc};\n        // NOTE: do not use #upsert() method, since it does not exist in some collections\n        collection.update(docId, modifier, createFulfill(function() {\n          return {_id: docId, action: 'updated'};\n        }));\n      } \n      // insert\n      else {\n        collection.insert(doc, createFulfill(function(id) {\n          return {_id: id, action: 'inserted'};\n        }));\n      }\n\n      return deferred.promise;\n    };\n\n    // performs $pull operations parallely.\n    // used for handling splice operations returned from getUpdates() to prevent conflicts.\n    // see issue: https://github.com/Urigo/angular-meteor/issues/793\n    AngularMeteorCollection._updateDiff = function(selector, update, callback) {\n      callback = callback || angular.noop;\n      var setters = _.omit(update, '$pull');\n      var updates = [setters];\n\n      _.each(update.$pull, function(pull, prop) {\n        var puller = {};\n        puller[prop] = pull;\n        updates.push({ $pull: puller });\n      });\n\n      this._updateParallel(selector, updates, callback);\n    };\n\n    // performs each update operation parallely\n    AngularMeteorCollection._updateParallel = function(selector, updates, callback) {\n      var self = this;\n      var done = _.after(updates.length, callback);\n\n      var next = function(err, affectedDocsNum) {\n        if (err) return callback(err);\n        done(null, affectedDocsNum);\n      };\n\n      _.each(updates, function(update) {\n        self.$$collection.update(selector, update, next);\n      });\n    };\n\n    AngularMeteorCollection.remove = function(keyOrDocs) {\n      var keys;\n      // remove whole collection\n      if (!keyOrDocs) {\n        keys = _.pluck(this, '_id');\n      } else {\n        // remove docs\n        keys = _.map([].concat(keyOrDocs), function(keyOrDoc) {\n          return keyOrDoc._id || keyOrDoc;\n        });\n      }\n      // Checks if all keys are correct.\n      check(keys, [Match.OneOf(String, Mongo.ObjectID)]);\n\n      var promises = keys.map(function(key) {\n        return this._removeDoc(key);\n      }, this);\n\n      var allPromise = $q.all(promises);\n\n      allPromise.finally(function() {\n        $timeout(angular.noop);\n      });\n\n      return allPromise;\n    };\n\n    AngularMeteorCollection._removeDoc = function(id) {\n      var deferred = $q.defer();\n      var collection = this.$$collection;\n      var fulfill = $meteorUtils.fulfill(deferred, null, { _id: id, action: 'removed' });\n      collection.remove(id, fulfill);\n      return deferred.promise;\n    };\n\n    AngularMeteorCollection._updateCursor = function(cursor, autoClientSave) {\n      var self = this;\n\n      // XXX - consider adding an option for a non-orderd result\n      // for faster performance.\n      if (self._hObserve) {\n        self._hObserve.stop();\n        self._hDataAutorun.stop();\n      }\n\n      var serverMode = false;\n      function setServerUpdateMode(name) {\n        serverMode = true;\n        // To simplify server update logic, we don't follow\n        // updates from the client at the same time.\n        self._unsetAutoClientSave();\n      }\n\n      var hUnsetTimeout = null;\n      // Here we use $timeout to combine multiple updates that go\n      // each one after another.\n      function unsetServerUpdateMode() {\n        if (hUnsetTimeout) {\n          $timeout.cancel(hUnsetTimeout);\n          hUnsetTimeout = null;\n        }\n        hUnsetTimeout = $timeout(function() {\n          serverMode = false;\n          // Finds updates that was potentially done from the client side\n          // and saves them.\n          var changes = collectionUtils.diff(self, self._serverBackup,\n            self._diffArrayFunc);\n          self._saveChanges(changes);\n          // After, continues following client updates.\n          if (autoClientSave) {\n            self._setAutoClientSave();\n          }\n        }, 0);\n      }\n\n      this._hObserve = cursor.observe({\n        addedAt: function(doc, atIndex) {\n          self.splice(atIndex, 0, doc);\n          self._serverBackup.splice(atIndex, 0, doc);\n          setServerUpdateMode();\n        },\n\n        changedAt: function(doc, oldDoc, atIndex) {\n          diffArray.deepCopyChanges(self[atIndex], doc);\n          diffArray.deepCopyRemovals(self[atIndex], doc);\n          self._serverBackup[atIndex] = self[atIndex];\n          setServerUpdateMode();\n        },\n\n        movedTo: function(doc, fromIndex, toIndex) {\n          self.splice(fromIndex, 1);\n          self.splice(toIndex, 0, doc);\n          self._serverBackup.splice(fromIndex, 1);\n          self._serverBackup.splice(toIndex, 0, doc);\n          setServerUpdateMode();\n        },\n\n        removedAt: function(oldDoc) {\n          var removedIndex = collectionUtils.findIndexById(self, oldDoc);\n\n          if (removedIndex != -1) {\n            self.splice(removedIndex, 1);\n            self._serverBackup.splice(removedIndex, 1);\n            setServerUpdateMode();\n          } else {\n            // If it's been removed on client then it's already not in collection\n            // itself but still is in the _serverBackup.\n            removedIndex = collectionUtils.findIndexById(self._serverBackup, oldDoc);\n\n            if (removedIndex != -1) {\n              self._serverBackup.splice(removedIndex, 1);\n            }\n          }\n        }\n      });\n\n      this._hDataAutorun = Tracker.autorun(function() {\n        cursor.fetch();\n        if (serverMode) {\n          unsetServerUpdateMode();\n        }\n      });\n    };\n\n    AngularMeteorCollection.stop = function() {\n      this._stopCursor();\n      this._hNewCurAutorun.stop();\n    };\n\n    AngularMeteorCollection._stopCursor = function() {\n      this._unsetAutoClientSave();\n\n      if (this._hObserve) {\n        this._hObserve.stop();\n        this._hDataAutorun.stop();\n      }\n\n      this.splice(0);\n      this._serverBackup.splice(0);\n    };\n\n    AngularMeteorCollection._unsetAutoClientSave = function(name) {\n      if (this._hRegAutoBind) {\n        this._hRegAutoBind();\n        this._hRegAutoBind = null;\n      }\n    };\n\n    AngularMeteorCollection._setAutoClientSave = function() {\n      var self = this;\n\n      // Always unsets auto save to keep only one $watch handler.\n      self._unsetAutoClientSave();\n\n      self._hRegAutoBind = $rootScope.$watch(function() {\n        return self;\n      }, function(nItems, oItems) {\n        if (nItems === oItems) return;\n\n        self._unsetAutoClientSave();\n        var changes = collectionUtils.diff(self, oItems,\n          self._diffArrayFunc);\n        self._saveChanges(changes);\n        self._setAutoClientSave();\n      }, true);\n    };\n\n    AngularMeteorCollection._saveChanges = function(changes) {\n      var self = this;\n\n      // Saves added documents\n      // Using reversed iteration to prevent indexes from changing during splice\n      var addedDocs = changes.added.reverse().map(function(descriptor) {\n        self.splice(descriptor.index, 1);\n        return descriptor.item;\n      });\n      if (addedDocs.length) self.save(addedDocs);\n\n      // Removes deleted documents\n      var removedDocs = changes.removed.map(function(descriptor) {\n        return descriptor.item;\n      });\n      if (removedDocs.length) self.remove(removedDocs);\n\n      // Updates changed documents\n      changes.changed.forEach(function(descriptor) {\n        self._updateDiff(descriptor.selector, descriptor.modifier);\n      });\n    };\n\n    return AngularMeteorCollection;\n}]);\n\nangularMeteorCollection.factory('$meteorCollectionFS', ['$meteorCollection', 'diffArray',\n  function($meteorCollection, diffArray) {\n    function $meteorCollectionFS(reactiveFunc, autoClientSave, collection) {\n      return new $meteorCollection(reactiveFunc, autoClientSave, collection, noNestedDiffArray);\n    }\n\n    var noNestedDiffArray = function(lastSeqArray, seqArray, callbacks) {\n      return diffArray(lastSeqArray, seqArray, callbacks, true);\n    };\n\n    return $meteorCollectionFS;\n}]);\n\nangularMeteorCollection.factory('$meteorCollection', [\n  'AngularMeteorCollection', '$rootScope', 'diffArray',\n  function(AngularMeteorCollection, $rootScope, diffArray) {\n    function $meteorCollection(reactiveFunc, autoClientSave, collection, diffArrayFunc) {\n      // Validate parameters\n      if (!reactiveFunc) {\n        throw new TypeError('The first argument of $meteorCollection is undefined.');\n      }\n\n      if (!(angular.isFunction(reactiveFunc) || angular.isFunction(reactiveFunc.find))) {\n        throw new TypeError(\n          'The first argument of $meteorCollection must be a function or\\\n            a have a find function property.');\n      }\n\n      if (!angular.isFunction(reactiveFunc)) {\n        collection = angular.isDefined(collection) ? collection : reactiveFunc;\n        reactiveFunc = _.bind(reactiveFunc.find, reactiveFunc);\n      }\n\n      // By default auto save - true.\n      autoClientSave = angular.isDefined(autoClientSave) ? autoClientSave : true;\n      var ngCollection = new AngularMeteorCollection(reactiveFunc, collection,\n        diffArrayFunc || diffArray, autoClientSave);\n\n      return ngCollection;\n    }\n\n    return $meteorCollection;\n }]);\n\nangularMeteorCollection.run([\n  '$rootScope', '$meteorCollection', '$meteorCollectionFS', '$meteorStopper',\n  function($rootScope, $meteorCollection, $meteorCollectionFS, $meteorStopper) {\n    var scopeProto = Object.getPrototypeOf($rootScope);\n    scopeProto.$meteorCollection = $meteorStopper($meteorCollection);\n    scopeProto.$meteorCollectionFS = $meteorStopper($meteorCollectionFS);\n }]);\n\n\n// Local utilities\nvar collectionUtils = {\n\n  findIndexById: function(collection, doc) {\n    var foundDoc = _.find(collection, function(colDoc) {\n      // EJSON.equals used to compare Mongo.ObjectIDs and Strings.\n      return EJSON.equals(colDoc._id, doc._id);\n    });\n    return _.indexOf(collection, foundDoc);\n  },\n\n  // Finds changes between two collections and saves differences.\n  diff: function(newCollection, oldCollection, diffMethod) {\n    var changes = {added: [], removed: [], changed: []};\n\n    diffMethod(oldCollection, newCollection, {\n      addedAt: function(id, item, index) {\n        changes.added.push({item: item, index: index});\n      },\n\n      removedAt: function(id, item, index) {\n        changes.removed.push({item: item, index: index});\n      },\n\n      changedAt: function(id, updates, index, oldItem) {\n        changes.changed.push({selector: id, modifier: updates});\n      },\n\n      movedTo: function(id, item, fromIndex, toIndex) {\n        // XXX do we need this?\n      }\n    });\n\n    return changes;\n  }\n};\n","'use strict';\n\nvar angularMeteorObject = angular.module('angular-meteor.object', ['angular-meteor.utils', 'angular-meteor.subscribe', 'angular-meteor.collection', 'getUpdates', 'diffArray']);\n\nangularMeteorObject.factory('AngularMeteorObject', [\n  '$q', '$meteorSubscribe', '$meteorUtils', 'diffArray', 'getUpdates', 'AngularMeteorCollection',\n  function($q, $meteorSubscribe, $meteorUtils, diffArray, getUpdates, AngularMeteorCollection) {\n    // A list of internals properties to not watch for, nor pass to the Document on update and etc.\n    AngularMeteorObject.$$internalProps = [\n      '$$collection', '$$options', '$$id', '$$hashkey', '$$internalProps', '$$scope',\n      'save', 'reset', 'subscribe', 'stop', 'autorunComputation', 'unregisterAutoBind', 'unregisterAutoDestroy', 'getRawObject',\n      '_auto', '_setAutos', '_eventEmitter', '_serverBackup', '_updateDiff', '_updateParallel'\n    ];\n\n    function AngularMeteorObject (collection, id, options){\n      // Make data not be an object so we can extend it to preserve\n      // Collection Helpers and the like\n      var data = new function SubObject() {};\n      var doc = collection.findOne(id, options);\n      var collectionExtension = _.pick(AngularMeteorCollection, '_updateParallel');\n      angular.extend(data, doc);\n      angular.extend(data, AngularMeteorObject);\n      angular.extend(data, collectionExtension);\n\n      data._serverBackup = doc || {};\n      data.$$collection = collection;\n      data.$$options = options;\n      data.$$id = id || new Mongo.ObjectID();\n\n      return data;\n    }\n\n    AngularMeteorObject.getRawObject = function () {\n      return angular.copy(_.omit(this, this.$$internalProps));\n    };\n\n    AngularMeteorObject.subscribe = function () {\n      $meteorSubscribe.subscribe.apply(this, arguments);\n      return this;\n    };\n\n    AngularMeteorObject.save = function(custom) {\n      var deferred = $q.defer();\n      var collection = this.$$collection;\n      var createFulfill = _.partial($meteorUtils.fulfill, deferred, null);\n      var oldDoc = collection.findOne(this.$$id);\n      var mods;\n\n      // update\n      if (oldDoc) {\n        if (custom)\n          mods = { $set: custom };\n        else {\n          mods = getUpdates(oldDoc, this.getRawObject());\n          // If there are no updates, there is nothing to do here, returning\n          if (_.isEmpty(mods)) {\n            return $q.when({ action: 'updated' });\n          }\n        }\n\n        // NOTE: do not use #upsert() method, since it does not exist in some collections\n        this._updateDiff(mods, createFulfill({ action: 'updated' }));\n      }\n      // insert\n      else {\n        if (custom)\n          mods = _.clone(custom);\n        else\n          mods = this.getRawObject();\n\n        mods._id = this.$$id;\n        collection.insert(mods, createFulfill({ action: 'inserted' }));\n      }\n\n      return deferred.promise;\n    };\n\n    AngularMeteorObject._updateDiff = function(update, callback) {\n      var selector = this.$$id;\n      AngularMeteorCollection._updateDiff.call(this, selector, update, callback);\n    };\n\n    AngularMeteorObject.reset = function(keepClientProps) {\n      var self = this;\n      var options = this.$$options;\n      var id = this.$$id;\n      var doc = this.$$collection.findOne(id, options);\n\n      if (doc) {\n        // extend SubObject\n        var docKeys = _.keys(doc);\n        var docExtension = _.pick(doc, docKeys);\n        var clientProps;\n\n        angular.extend(Object.getPrototypeOf(self), Object.getPrototypeOf(doc));\n        _.extend(self, docExtension);\n        _.extend(self._serverBackup, docExtension);\n\n        if (keepClientProps) {\n          clientProps = _.intersection(_.keys(self), _.keys(self._serverBackup));\n        } else {\n          clientProps = _.keys(self);\n        }\n\n        var serverProps = _.keys(doc);\n        var removedKeys = _.difference(clientProps, serverProps, self.$$internalProps);\n\n        removedKeys.forEach(function (prop) {\n          delete self[prop];\n          delete self._serverBackup[prop];\n        });\n      }\n\n      else {\n        _.keys(this.getRawObject()).forEach(function(prop) {\n          delete self[prop];\n        });\n\n        self._serverBackup = {};\n      }\n    };\n\n    AngularMeteorObject.stop = function () {\n      if (this.unregisterAutoDestroy)\n        this.unregisterAutoDestroy();\n\n      if (this.unregisterAutoBind)\n        this.unregisterAutoBind();\n\n      if (this.autorunComputation && this.autorunComputation.stop)\n        this.autorunComputation.stop();\n    };\n\n    return AngularMeteorObject;\n}]);\n\n\nangularMeteorObject.factory('$meteorObject', [\n  '$rootScope', '$meteorUtils', 'getUpdates', 'AngularMeteorObject',\n  function($rootScope, $meteorUtils, getUpdates, AngularMeteorObject) {\n    function $meteorObject(collection, id, auto, options) {\n      // Validate parameters\n      if (!collection) {\n        throw new TypeError(\"The first argument of $meteorObject is undefined.\");\n      }\n\n      if (!angular.isFunction(collection.findOne)) {\n        throw new TypeError(\"The first argument of $meteorObject must be a function or a have a findOne function property.\");\n      }\n\n      var data = new AngularMeteorObject(collection, id, options);\n      data._auto = auto !== false; // Making auto default true - http://stackoverflow.com/a/15464208/1426570\n      angular.extend(data, $meteorObject);\n      data._setAutos();\n      return data;\n    }\n\n    $meteorObject._setAutos = function() {\n      var self = this;\n\n      this.autorunComputation = $meteorUtils.autorun($rootScope, function() {\n        self.reset(true);\n      });\n\n      // Deep watches the model and performs autobind\n      this.unregisterAutoBind = this._auto && $rootScope.$watch(function(){\n        return self.getRawObject();\n      }, function (item, oldItem) {\n        if (item !== oldItem) self.save();\n      }, true);\n\n      this.unregisterAutoDestroy = $rootScope.$on('$destroy', function() {\n        if (self && self.stop) {\n          self.stop();\n        }\n      });\n    };\n\n    return $meteorObject;\n}]);\n\nangularMeteorObject.run([\n  '$rootScope', '$meteorObject', '$meteorStopper',\n  function ($rootScope, $meteorObject, $meteorStopper) {\n    var scopeProto = Object.getPrototypeOf($rootScope);\n    scopeProto.$meteorObject = $meteorStopper($meteorObject);\n}]);\n","'use strict';\n\nvar angularMeteorUser = angular.module('angular-meteor.user', ['angular-meteor.utils']);\n\n// requires package 'accounts-password'\nangularMeteorUser.service('$meteorUser', [\n  '$rootScope', '$meteorUtils', '$q',\n  function($rootScope, $meteorUtils, $q){\n    var pack = Package['accounts-base'];\n    if (!pack) return;\n\n    var self = this;\n    var Accounts = pack.Accounts;\n\n    this.waitForUser = function(){\n\n      var deferred = $q.defer();\n\n      $meteorUtils.autorun($rootScope, function(){\n        if ( !Meteor.loggingIn() )\n          deferred.resolve( Meteor.user() );\n      });\n\n      return deferred.promise;\n    };\n\n    this.requireUser = function(){\n\n      var deferred = $q.defer();\n\n      $meteorUtils.autorun($rootScope, function(){\n        if ( !Meteor.loggingIn() ) {\n          if ( Meteor.user() == null)\n            deferred.reject(\"AUTH_REQUIRED\");\n          else\n            deferred.resolve( Meteor.user() );\n        }\n      });\n\n      return deferred.promise;\n    };\n\n    this.requireValidUser = function(validatorFn) {\n      return self.requireUser().then(function(user){\n        var valid = validatorFn( user );\n\n        if ( valid === true )\n          return user;\n        else if ( typeof valid === \"string\" )\n          return $q.reject( valid );\n        else\n          return $q.reject( \"FORBIDDEN\" );\n\t    });\n\t  };\n\n    this.loginWithPassword = $meteorUtils.promissor(Meteor, 'loginWithPassword');\n    this.createUser = $meteorUtils.promissor(Accounts, 'createUser');\n    this.changePassword = $meteorUtils.promissor(Accounts, 'changePassword');\n    this.forgotPassword = $meteorUtils.promissor(Accounts, 'forgotPassword');\n    this.resetPassword = $meteorUtils.promissor(Accounts, 'resetPassword');\n    this.verifyEmail = $meteorUtils.promissor(Accounts, 'verifyEmail');\n    this.logout = $meteorUtils.promissor(Meteor, 'logout');\n    this.logoutOtherClients = $meteorUtils.promissor(Meteor, 'logoutOtherClients');\n    this.loginWithFacebook = $meteorUtils.promissor(Meteor, 'loginWithFacebook');\n    this.loginWithTwitter = $meteorUtils.promissor(Meteor, 'loginWithTwitter');\n    this.loginWithGoogle = $meteorUtils.promissor(Meteor, 'loginWithGoogle');\n    this.loginWithGithub = $meteorUtils.promissor(Meteor, 'loginWithGithub');\n    this.loginWithMeteorDeveloperAccount = $meteorUtils.promissor(Meteor, 'loginWithMeteorDeveloperAccount');\n    this.loginWithMeetup = $meteorUtils.promissor(Meteor, 'loginWithMeetup');\n    this.loginWithWeibo = $meteorUtils.promissor(Meteor, 'loginWithWeibo');\n  }\n]);\n\nangularMeteorUser.run([\n  '$rootScope', '$meteorUtils',\n  function($rootScope, $meteorUtils){\n    $meteorUtils.autorun($rootScope, function(){\n      if (!Meteor.user) return;\n      $rootScope.currentUser = Meteor.user();\n      $rootScope.loggingIn = Meteor.loggingIn();\n    });\n  }\n]);","'use strict';\n\nvar angularMeteorMethods = angular.module('angular-meteor.methods', ['angular-meteor.utils']);\n\nangularMeteorMethods.service('$meteorMethods', [\n  '$q', '$meteorUtils',\n  function($q, $meteorUtils) {\n    this.call = function(){\n      var deferred = $q.defer();\n      var fulfill = $meteorUtils.fulfill(deferred);\n      var args = _.toArray(arguments).concat(fulfill);\n      Meteor.call.apply(this, args);\n      return deferred.promise;\n    };\n  }\n]);","'use strict';\nvar angularMeteorSession = angular.module('angular-meteor.session', ['angular-meteor.utils']);\n\nangularMeteorSession.factory('$meteorSession', ['$meteorUtils', '$parse',\n  function ($meteorUtils, $parse) {\n    return function (session) {\n\n      return {\n\n        bind: function(scope, model) {\n          var getter = $parse(model);\n          var setter = getter.assign;\n          $meteorUtils.autorun(scope, function() {\n            setter(scope, Session.get(session));\n          });\n\n          scope.$watch(model, function(newItem, oldItem) {\n            Session.set(session, getter(scope));\n          }, true);\n\n        }\n      };\n    }\n  }\n]);\n\n","/**\n * Created by netanel on 29/12/14.\n */\nvar angularMeteorReactiveScope = angular.module('angular-meteor.reactive-scope', []);\n\nangularMeteorReactiveScope.run(['$rootScope', '$parse', function($rootScope, $parse) {\n  Object.getPrototypeOf($rootScope).getReactively = function(property, objectEquality) {\n    var self = this;\n    var getValue = $parse(property);\n    objectEquality = !!objectEquality;\n\n    if (!self.hasOwnProperty('$$trackerDeps')) {\n      self.$$trackerDeps = {};\n    }\n\n    if (!self.$$trackerDeps[property]) {\n      self.$$trackerDeps[property] = new Tracker.Dependency();\n\n      self.$watch(function() {\n        return getValue(self)\n      }, function(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          self.$$trackerDeps[property].changed();\n        }\n      }, objectEquality);\n    }\n\n    self.$$trackerDeps[property].depend();\n\n    return getValue(self);\n  };\n  Object.getPrototypeOf($rootScope).getCollectionReactively = function(property) {\n    var self = this;\n    var getValue = $parse(property);\n\n\n    if (!self.hasOwnProperty('$$trackerDeps')) {\n      self.$$trackerDeps = {};\n    }\n\n    if (!self.$$trackerDeps[property]) {\n      self.$$trackerDeps[property] = new Tracker.Dependency();\n\n      self.$watchCollection(property, function() {\n        self.$$trackerDeps[property].changed();\n      });\n    }\n\n    self.$$trackerDeps[property].depend();\n\n    return getValue(self);\n  };\n}]);\n","'use strict';\nvar angularMeteorUtils = angular.module('angular-meteor.utils', []);\n\nangularMeteorUtils.service('$meteorUtils', [\n  '$q', '$timeout',\n  function ($q, $timeout) {\n    var self = this;\n    this.getCollectionByName = function(string){\n      return Mongo.Collection.get(string);\n    };\n    this.autorun = function(scope, fn) {\n      // wrapping around Deps.autorun\n      var comp = Tracker.autorun(function(c) {\n        fn(c);\n\n        // this is run immediately for the first call\n        // but after that, we need to $apply to start Angular digest\n        if (!c.firstRun) $timeout(angular.noop, 0);\n      });\n      // stop autorun when scope is destroyed\n      scope.$on('$destroy', function() {\n        comp.stop();\n      });\n      // return autorun object so that it can be stopped manually\n      return comp;\n    };\n    // Borrowed from angularFire - https://github.com/firebase/angularfire/blob/master/src/utils.js#L445-L454\n    this.stripDollarPrefixedKeys = function (data) {\n      if( !angular.isObject(data) ||\n        data instanceof Date ||\n        data instanceof File ||\n        EJSON.toJSONValue(data).$type === 'oid' ||\n        (typeof FS === 'object' && data instanceof FS.File)) {\n        return data;\n      }\n      var out = angular.isArray(data)? [] : {};\n      angular.forEach(data, function(v,k) {\n        if(typeof k !== 'string' || k.charAt(0) !== '$') {\n          out[k] = self.stripDollarPrefixedKeys(v);\n        }\n      });\n      return out;\n    };\n    // Returns a callback which fulfills promise\n    this.fulfill = function(deferred, boundError, boundResult) {\n      return function(err, result) {\n        if (err)\n          deferred.reject(boundError == null ? err : boundError);\n        else if (typeof boundResult == \"function\")\n          deferred.resolve(boundResult == null ? result : boundResult(result));\n        else\n          deferred.resolve(boundResult == null ? result : boundResult);\n      };\n    };\n    // creates a function which invokes method with the given arguments and returns a promise\n    this.promissor = function(obj, method) {\n      return function() {\n        var deferred = $q.defer();\n        var fulfill = self.fulfill(deferred);\n        var args = _.toArray(arguments).concat(fulfill);\n        obj[method].apply(obj, args);\n        return deferred.promise;\n      };\n    };\n  }\n]);\n\nangularMeteorUtils.run(['$rootScope', '$meteorUtils',\n  function($rootScope, $meteorUtils) {\n    Object.getPrototypeOf($rootScope).$meteorAutorun = function(fn) {\n      return $meteorUtils.autorun(this, fn);\n    };\n}]);\n","'use strict';\n\nvar angularMeteorCamera = angular.module('angular-meteor.camera', ['angular-meteor.utils']);\n\n// requires package 'mdg:camera'\nangularMeteorCamera.service('$meteorCamera', [\n  '$q', '$meteorUtils',\n  function ($q, $meteorUtils) {\n    var pack = Package['mdg:camera'];\n    if (!pack) return;\n\n    var MeteorCamera = pack.MeteorCamera;\n\n    this.getPicture = function(options){\n      options = options || {};\n      var deferred = $q.defer();\n      MeteorCamera.getPicture(options, $meteorUtils.fulfill(deferred));\n      return deferred.promise;\n    };\n  }\n]);\n","// Define angular-meteor and its dependencies\nvar angularMeteor = angular.module('angular-meteor', [\n  'angular-meteor.subscribe',\n  'angular-meteor.collection',\n  'angular-meteor.object',\n  'angular-meteor.user',\n  'angular-meteor.methods',\n  'angular-meteor.session',\n  'angular-meteor.reactive-scope',\n  'angular-meteor.utils',\n  'angular-meteor.camera'\n]);\n\nangularMeteor.run(['$compile', '$document', '$rootScope', function ($compile, $document, $rootScope) {\n    // Recompile after iron:router builds page\n    if(Package['iron:router']) {\n      var appLoaded = false;\n      Package['iron:router'].Router.onAfterAction(function(req, res, next) {\n        Tracker.afterFlush(function() {\n          if (!appLoaded) {\n            $compile($document)($rootScope);\n            if (!$rootScope.$$phase) $rootScope.$apply();\n            appLoaded = true;\n          }\n        })\n      });\n    }\n  }]);\n\n// Putting all services under $meteor service for syntactic sugar\nangularMeteor.service('$meteor', ['$meteorCollection', '$meteorCollectionFS', '$meteorObject', '$meteorMethods', '$meteorSession', '$meteorSubscribe', '$meteorUtils', '$meteorCamera', '$meteorUser',\n  function($meteorCollection, $meteorCollectionFS, $meteorObject, $meteorMethods, $meteorSession, $meteorSubscribe, $meteorUtils, $meteorCamera, $meteorUser){\n    this.collection = $meteorCollection;\n    this.collectionFS = $meteorCollectionFS;\n    this.object = $meteorObject;\n    this.subscribe = $meteorSubscribe.subscribe;\n    this.call = $meteorMethods.call;\n    this.loginWithPassword = $meteorUser.loginWithPassword;\n    this.requireUser = $meteorUser.requireUser;\n    this.requireValidUser = $meteorUser.requireValidUser;\n    this.waitForUser = $meteorUser.waitForUser;\n    this.createUser = $meteorUser.createUser;\n    this.changePassword = $meteorUser.changePassword;\n    this.forgotPassword = $meteorUser.forgotPassword;\n    this.resetPassword = $meteorUser.resetPassword;\n    this.verifyEmail = $meteorUser.verifyEmail;\n    this.loginWithMeteorDeveloperAccount = $meteorUser.loginWithMeteorDeveloperAccount;\n    this.loginWithFacebook = $meteorUser.loginWithFacebook;\n    this.loginWithGithub = $meteorUser.loginWithGithub;\n    this.loginWithGoogle = $meteorUser.loginWithGoogle;\n    this.loginWithMeetup = $meteorUser.loginWithMeetup;\n    this.loginWithTwitter = $meteorUser.loginWithTwitter;\n    this.loginWithWeibo = $meteorUser.loginWithWeibo;\n    this.logout = $meteorUser.logout;\n    this.logoutOtherClients = $meteorUser.logoutOtherClients;\n    this.session = $meteorSession;\n    this.autorun = $meteorUtils.autorun;\n    this.getCollectionByName = $meteorUtils.getCollectionByName;\n    this.getPicture = $meteorCamera.getPicture;\n}]);\n"]}}]